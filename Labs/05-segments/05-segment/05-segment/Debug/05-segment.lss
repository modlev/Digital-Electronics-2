
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002b2  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef5  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ec  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e6  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  00002344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000429  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 ac 00 	call	0x158	; 0x158 <SEG_init>
	//SEG_clear(); // This function turns off the LEDs
	
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	
	TIM1_overflow_4ms();
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	89 7f       	andi	r24, 0xF9	; 249
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  f4:	ef e6       	ldi	r30, 0x6F	; 111
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
	sei();
  fe:	78 94       	sei
 100:	ff cf       	rjmp	.-2      	; 0x100 <main+0x20>

00000102 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
		SEG_update_shift_regs(i/10, poss+1);
		_delay_ms(900);
	}
	*/
	// Snake program
	for(int i =0;; i++)
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i%6==0)
 110:	06 e0       	ldi	r16, 0x06	; 6
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	ce 01       	movw	r24, r28
 116:	b8 01       	movw	r22, r16
 118:	0e 94 2f 01 	call	0x25e	; 0x25e <__divmodhi4>
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	71 f4       	brne	.+28     	; 0x13c <__vector_13+0x3a>
		{
			SEG_update_shift_regs(0,poss);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 bc 00 	call	0x178	; 0x178 <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f e3       	ldi	r18, 0x3F	; 63
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <__vector_13+0x2c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__vector_13+0x36>
 138:	00 00       	nop
 13a:	0c c0       	rjmp	.+24     	; 0x154 <__vector_13+0x52>
			_delay_ms(1000);
		}
		else 
		{
			SEG_update_shift_regs(i%6,poss);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	0e 94 bc 00 	call	0x178	; 0x178 <SEG_update_shift_regs>
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <__vector_13+0x46>
 150:	00 c0       	rjmp	.+0      	; 0x152 <__vector_13+0x50>
 152:	00 00       	nop
		SEG_update_shift_regs(i/10, poss+1);
		_delay_ms(900);
	}
	*/
	// Snake program
	for(int i =0;; i++)
 154:	21 96       	adiw	r28, 0x01	; 1
		else 
		{
			SEG_update_shift_regs(i%6,poss);
			_delay_ms(1000);
		}
	}
 156:	de cf       	rjmp	.-68     	; 0x114 <__vector_13+0x12>

00000158 <SEG_init>:
};
/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
	/* Configuration of SSD signals */
	GPIO_config_output(&DDRD, SEGMENT_LATCH);
 158:	64 e0       	ldi	r22, 0x04	; 4
 15a:	8a e2       	ldi	r24, 0x2A	; 42
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_CLK);
 162:	67 e0       	ldi	r22, 0x07	; 7
 164:	8a e2       	ldi	r24, 0x2A	; 42
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_config_output(&DDRB, SEGMENT_DATA);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	84 e2       	ldi	r24, 0x24	; 36
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 176:	08 95       	ret

00000178 <SEG_update_shift_regs>:



/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 5f       	subi	r30, 0xFC	; 252
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 188:	e6 2f       	mov	r30, r22
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	d0 81       	ld	r29, Z

	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 192:	64 e0       	ldi	r22, 0x04	; 4
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);
 19c:	67 e0       	ldi	r22, 0x07	; 7
 19e:	8b e2       	ldi	r24, 0x2B	; 43
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	85 e2       	ldi	r24, 0x25	; 37
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <SEG_update_shift_regs+0x3a>
 1b6:	00 00       	nop
 1b8:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if((segments % 2) == 0) //LSB is 0
 1ba:	10 fd       	sbrc	r17, 0
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	85 e2       	ldi	r24, 0x25	; 37
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <SEG_update_shift_regs+0x5c>
		else  //LSB is 1
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	85 e2       	ldi	r24, 0x25	; 37
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <SEG_update_shift_regs+0x5e>
 1da:	00 00       	nop
		
		// Wait 1 us
		_delay_us(1);
		
		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 1dc:	67 e0       	ldi	r22, 0x07	; 7
 1de:	8b e2       	ldi	r24, 0x2B	; 43
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <SEG_update_shift_regs+0x70>
 1ec:	00 00       	nop
		
		// Wait 1 us
		_delay_us(1);
		
		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 1ee:	67 e0       	ldi	r22, 0x07	; 7
 1f0:	8b e2       	ldi	r24, 0x2B	; 43
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
		
		// Shift "segments"
		segments = segments >> 1;
 1f8:	16 95       	lsr	r17
 1fa:	c1 50       	subi	r28, 0x01	; 1
	// Wait 1 us
	_delay_us(1);
	
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 1fc:	f1 f6       	brne	.-68     	; 0x1ba <SEG_update_shift_regs+0x42>
 1fe:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if((position % 2) == 0) //LSB is 0
 200:	d0 fd       	sbrc	r29, 0
 202:	06 c0       	rjmp	.+12     	; 0x210 <SEG_update_shift_regs+0x98>
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 20e:	05 c0       	rjmp	.+10     	; 0x21a <SEG_update_shift_regs+0xa2>
		else  //LSB is 1
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	85 e2       	ldi	r24, 0x25	; 37
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <SEG_update_shift_regs+0xa4>
 220:	00 00       	nop

		// Wait 1 us
		_delay_us(1);

		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 222:	67 e0       	ldi	r22, 0x07	; 7
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <SEG_update_shift_regs+0xb6>
 232:	00 00       	nop

		// Wait 1 us
		_delay_us(1);

		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 234:	67 e0       	ldi	r22, 0x07	; 7
 236:	8b e2       	ldi	r24, 0x2B	; 43
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	
		// Shift "position"
		position = position >> 1;
 23e:	d6 95       	lsr	r29
 240:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 242:	f1 f6       	brne	.-68     	; 0x200 <SEG_update_shift_regs+0x88>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 244:	64 e0       	ldi	r22, 0x04	; 4
 246:	8b e2       	ldi	r24, 0x2B	; 43
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <SEG_update_shift_regs+0xd8>
 254:	00 00       	nop
	
	// Wait 1 us
	_delay_us(1);
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	08 95       	ret

0000025e <__divmodhi4>:
 25e:	97 fb       	bst	r25, 7
 260:	07 2e       	mov	r0, r23
 262:	16 f4       	brtc	.+4      	; 0x268 <__divmodhi4+0xa>
 264:	00 94       	com	r0
 266:	07 d0       	rcall	.+14     	; 0x276 <__divmodhi4_neg1>
 268:	77 fd       	sbrc	r23, 7
 26a:	09 d0       	rcall	.+18     	; 0x27e <__divmodhi4_neg2>
 26c:	0e 94 43 01 	call	0x286	; 0x286 <__udivmodhi4>
 270:	07 fc       	sbrc	r0, 7
 272:	05 d0       	rcall	.+10     	; 0x27e <__divmodhi4_neg2>
 274:	3e f4       	brtc	.+14     	; 0x284 <__divmodhi4_exit>

00000276 <__divmodhi4_neg1>:
 276:	90 95       	com	r25
 278:	81 95       	neg	r24
 27a:	9f 4f       	sbci	r25, 0xFF	; 255
 27c:	08 95       	ret

0000027e <__divmodhi4_neg2>:
 27e:	70 95       	com	r23
 280:	61 95       	neg	r22
 282:	7f 4f       	sbci	r23, 0xFF	; 255

00000284 <__divmodhi4_exit>:
 284:	08 95       	ret

00000286 <__udivmodhi4>:
 286:	aa 1b       	sub	r26, r26
 288:	bb 1b       	sub	r27, r27
 28a:	51 e1       	ldi	r21, 0x11	; 17
 28c:	07 c0       	rjmp	.+14     	; 0x29c <__udivmodhi4_ep>

0000028e <__udivmodhi4_loop>:
 28e:	aa 1f       	adc	r26, r26
 290:	bb 1f       	adc	r27, r27
 292:	a6 17       	cp	r26, r22
 294:	b7 07       	cpc	r27, r23
 296:	10 f0       	brcs	.+4      	; 0x29c <__udivmodhi4_ep>
 298:	a6 1b       	sub	r26, r22
 29a:	b7 0b       	sbc	r27, r23

0000029c <__udivmodhi4_ep>:
 29c:	88 1f       	adc	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	5a 95       	dec	r21
 2a2:	a9 f7       	brne	.-22     	; 0x28e <__udivmodhi4_loop>
 2a4:	80 95       	com	r24
 2a6:	90 95       	com	r25
 2a8:	bc 01       	movw	r22, r24
 2aa:	cd 01       	movw	r24, r26
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
