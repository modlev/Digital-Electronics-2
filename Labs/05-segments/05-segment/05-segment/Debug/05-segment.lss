
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5c  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e9  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000614  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d3  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054e  00000000  00000000  0000297f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002ecd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SEG_init>

    // Test of SSD: display number '3' at position 0
	
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SEG_update_shift_regs>
	SEG_clear(); // This function turns off the LEDs
  ec:	0e 94 68 01 	call	0x2d0	; 0x2d0 <SEG_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	83 ed       	ldi	r24, 0xD3	; 211
  f4:	90 e3       	ldi	r25, 0x30	; 48
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x16>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x20>
 100:	00 00       	nop
	_delay_ms(1000);
	
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	
	TIM1_overflow_4ms();
 102:	e1 e8       	ldi	r30, 0x81	; 129
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	89 7f       	andi	r24, 0xF9	; 249
 10a:	80 83       	st	Z, r24
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 112:	ef e6       	ldi	r30, 0x6F	; 111
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
	
    // Enables interrupts by setting the global interrupt mask
	sei();
 11c:	78 94       	sei
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x3e>

00000120 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	1f 93       	push	r17
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
	int poss = 0; // variable to know the possition
	
	//loop for counting to 60 digit
	for(int i = 0; i < 60; i++)
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		//sets the first digit number
		SEG_update_shift_regs(i%10, poss); 
 150:	0f 2e       	mov	r0, r31
 152:	fa e0       	ldi	r31, 0x0A	; 10
 154:	ef 2e       	mov	r14, r31
 156:	f1 2c       	mov	r15, r1
 158:	f0 2d       	mov	r31, r0
 15a:	ce 01       	movw	r24, r28
 15c:	b7 01       	movw	r22, r14
 15e:	0e 94 6d 01 	call	0x2da	; 0x2da <__divmodhi4>
 162:	16 2f       	mov	r17, r22
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SEG_update_shift_regs>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	80 e7       	ldi	r24, 0x70	; 112
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <__vector_13+0x50>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__vector_13+0x5a>
 17a:	00 00       	nop
		_delay_ms(50);
		//sets the seconnd digit number
		SEG_update_shift_regs(i/10, poss+1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 2f       	mov	r24, r17
 180:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SEG_update_shift_regs>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <__vector_13+0x6a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <__vector_13+0x74>
 194:	00 00       	nop
{
    // WRITE YOUR CODE HERE
	int poss = 0; // variable to know the possition
	
	//loop for counting to 60 digit
	for(int i = 0; i < 60; i++)
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	cc 33       	cpi	r28, 0x3C	; 60
 19a:	d1 05       	cpc	r29, r1
 19c:	f1 f6       	brne	.-68     	; 0x15a <__vector_13+0x3a>
	SEG_update_shift_regs(0,2);
	_delay_ms(200);
	SEG_update_shift_regs(0,1);
	_delay_ms(200);
	*/
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	1f 91       	pop	r17
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <SEG_init>:
};
/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
	/* Configuration of SSD signals */
	GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1ca:	64 e0       	ldi	r22, 0x04	; 4
 1cc:	8a e2       	ldi	r24, 0x2A	; 42
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_config_output(&DDRD, SEGMENT_CLK);
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	8a e2       	ldi	r24, 0x2A	; 42
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
	GPIO_config_output(&DDRB, SEGMENT_DATA);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	84 e2       	ldi	r24, 0x24	; 36
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 1e8:	08 95       	ret

000001ea <SEG_update_shift_regs>:



/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 1f0:	e8 2f       	mov	r30, r24
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ec 5f       	subi	r30, 0xFC	; 252
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 1fa:	e6 2f       	mov	r30, r22
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	d0 81       	ld	r29, Z

	// Pull LATCH, CLK, and DATA low
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 204:	64 e0       	ldi	r22, 0x04	; 4
 206:	8b e2       	ldi	r24, 0x2B	; 43
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);
 20e:	67 e0       	ldi	r22, 0x07	; 7
 210:	8b e2       	ldi	r24, 0x2B	; 43
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <SEG_update_shift_regs+0x3a>
 228:	00 00       	nop
 22a:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if((segments % 2) == 0) //LSB is 0
 22c:	10 fd       	sbrc	r17, 0
 22e:	06 c0       	rjmp	.+12     	; 0x23c <SEG_update_shift_regs+0x52>
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	85 e2       	ldi	r24, 0x25	; 37
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 23a:	05 c0       	rjmp	.+10     	; 0x246 <SEG_update_shift_regs+0x5c>
		else  //LSB is 1
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	85 e2       	ldi	r24, 0x25	; 37
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <SEG_update_shift_regs+0x5e>
 24c:	00 00       	nop
		
		// Wait 1 us
		_delay_us(1);
		
		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 24e:	67 e0       	ldi	r22, 0x07	; 7
 250:	8b e2       	ldi	r24, 0x2B	; 43
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <SEG_update_shift_regs+0x70>
 25e:	00 00       	nop
		
		// Wait 1 us
		_delay_us(1);
		
		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
		
		// Shift "segments"
		segments = segments >> 1;
 26a:	16 95       	lsr	r17
 26c:	c1 50       	subi	r28, 0x01	; 1
	// Wait 1 us
	_delay_us(1);
	
	// Loop through the 1st byte (segments)
	// a b c d e f g DP (active low values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 26e:	f1 f6       	brne	.-68     	; 0x22c <SEG_update_shift_regs+0x42>
 270:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if((position % 2) == 0) //LSB is 0
 272:	d0 fd       	sbrc	r29, 0
 274:	06 c0       	rjmp	.+12     	; 0x282 <SEG_update_shift_regs+0x98>
			GPIO_write_low(&PORTB,SEGMENT_DATA);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	85 e2       	ldi	r24, 0x25	; 37
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 280:	05 c0       	rjmp	.+10     	; 0x28c <SEG_update_shift_regs+0xa2>
		else  //LSB is 1
			GPIO_write_high(&PORTB,SEGMENT_DATA);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <SEG_update_shift_regs+0xa4>
 292:	00 00       	nop

		// Wait 1 us
		_delay_us(1);

		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 294:	67 e0       	ldi	r22, 0x07	; 7
 296:	8b e2       	ldi	r24, 0x2B	; 43
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <SEG_update_shift_regs+0xb6>
 2a4:	00 00       	nop

		// Wait 1 us
		_delay_us(1);

		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
	
		// Shift "position"
		position = position >> 1;
 2b0:	d6 95       	lsr	r29
 2b2:	c1 50       	subi	r28, 0x01	; 1
		segments = segments >> 1;
	}

	// Loop through the 2nd byte (position)
	// p3 p2 p1 p0 . . . . (active high values)
	for (bit_number = 0; bit_number < 8; bit_number++)
 2b4:	f1 f6       	brne	.-68     	; 0x272 <SEG_update_shift_regs+0x88>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 2b6:	64 e0       	ldi	r22, 0x04	; 4
 2b8:	8b e2       	ldi	r24, 0x2B	; 43
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	8a 95       	dec	r24
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <SEG_update_shift_regs+0xd8>
 2c6:	00 00       	nop
	
	// Wait 1 us
	_delay_us(1);
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	08 95       	ret

000002d0 <SEG_clear>:

/*--------------------------------------------------------------------*/
/* SEG_clear */
void SEG_clear(void)
{
	SEG_update_shift_regs(10,0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	8a e0       	ldi	r24, 0x0A	; 10
 2d4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SEG_update_shift_regs>
 2d8:	08 95       	ret

000002da <__divmodhi4>:
 2da:	97 fb       	bst	r25, 7
 2dc:	07 2e       	mov	r0, r23
 2de:	16 f4       	brtc	.+4      	; 0x2e4 <__divmodhi4+0xa>
 2e0:	00 94       	com	r0
 2e2:	07 d0       	rcall	.+14     	; 0x2f2 <__divmodhi4_neg1>
 2e4:	77 fd       	sbrc	r23, 7
 2e6:	09 d0       	rcall	.+18     	; 0x2fa <__divmodhi4_neg2>
 2e8:	0e 94 81 01 	call	0x302	; 0x302 <__udivmodhi4>
 2ec:	07 fc       	sbrc	r0, 7
 2ee:	05 d0       	rcall	.+10     	; 0x2fa <__divmodhi4_neg2>
 2f0:	3e f4       	brtc	.+14     	; 0x300 <__divmodhi4_exit>

000002f2 <__divmodhi4_neg1>:
 2f2:	90 95       	com	r25
 2f4:	81 95       	neg	r24
 2f6:	9f 4f       	sbci	r25, 0xFF	; 255
 2f8:	08 95       	ret

000002fa <__divmodhi4_neg2>:
 2fa:	70 95       	com	r23
 2fc:	61 95       	neg	r22
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000300 <__divmodhi4_exit>:
 300:	08 95       	ret

00000302 <__udivmodhi4>:
 302:	aa 1b       	sub	r26, r26
 304:	bb 1b       	sub	r27, r27
 306:	51 e1       	ldi	r21, 0x11	; 17
 308:	07 c0       	rjmp	.+14     	; 0x318 <__udivmodhi4_ep>

0000030a <__udivmodhi4_loop>:
 30a:	aa 1f       	adc	r26, r26
 30c:	bb 1f       	adc	r27, r27
 30e:	a6 17       	cp	r26, r22
 310:	b7 07       	cpc	r27, r23
 312:	10 f0       	brcs	.+4      	; 0x318 <__udivmodhi4_ep>
 314:	a6 1b       	sub	r26, r22
 316:	b7 0b       	sbc	r27, r23

00000318 <__udivmodhi4_ep>:
 318:	88 1f       	adc	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	5a 95       	dec	r21
 31e:	a9 f7       	brne	.-22     	; 0x30a <__udivmodhi4_loop>
 320:	80 95       	com	r24
 322:	90 95       	com	r25
 324:	bc 01       	movw	r22, r24
 326:	cd 01       	movw	r24, r26
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
