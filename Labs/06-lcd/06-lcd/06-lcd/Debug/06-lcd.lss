
06-lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  0000052c  000005c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080013c  0080013c  000005fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001392  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b1  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008a2  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00002ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d9  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003de1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 34       	cpi	r26, 0x43	; 67
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
	
};
int main(void)
{
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c4 e0       	ldi	r28, 0x04	; 4
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	04 e3       	ldi	r16, 0x34	; 52
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 48; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	lcd_init(LCD_DISP_ON);

	// Set pointer to beginning of CGRAM memory
	
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 48; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
    // Initialize LCD display
    //lcd_init(LCD_DISP_ON);

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	84 e3       	ldi	r24, 0x34	; 52
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	//lcd_gotoxy(1, 1);
	//lcd_putc('b');
	lcd_gotoxy(12,1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(5);
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms();
 238:	e1 eb       	ldi	r30, 0xB1	; 177
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	87 60       	ori	r24, 0x07	; 7
 240:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 242:	e0 e7       	ldi	r30, 0x70	; 112
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
 24c:	85 b5       	in	r24, 0x25	; 37
 24e:	8c 7f       	andi	r24, 0xFC	; 252
 250:	85 bd       	out	0x25, r24	; 37
 252:	85 b5       	in	r24, 0x25	; 37
 254:	84 60       	ori	r24, 0x04	; 4
 256:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 258:	ee e6       	ldi	r30, 0x6E	; 110
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
    sei();
 262:	78 94       	sei
 264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x70>

00000266 <__vector_9>:
 * (6 x 16 ms = 100 ms).
 */


ISR(TIMER2_OVF_vect)
{
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	2f 93       	push	r18
 272:	3f 93       	push	r19
 274:	4f 93       	push	r20
 276:	5f 93       	push	r21
 278:	6f 93       	push	r22
 27a:	7f 93       	push	r23
 27c:	8f 93       	push	r24
 27e:	9f 93       	push	r25
 280:	af 93       	push	r26
 282:	bf 93       	push	r27
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	2a 97       	sbiw	r28, 0x0a	; 10
 292:	de bf       	out	0x3e, r29	; 62
 294:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
    static uint8_t tens = 0;        // Tenths of a second
    static uint8_t secs = 0;        // Seconds
	static uint8_t min = 0;			// Minutes
	static uint16_t root = 0;		// Square root of seconds
    char lcd_string[2] = " ";       // String for converting numbers by itoa()
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01
	char lcd_strings[2] = "  ";		
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	90 e2       	ldi	r25, 0x20	; 32
 2a2:	9c 83       	std	Y+4, r25	; 0x04
 2a4:	8b 83       	std	Y+3, r24	; 0x03
	char lcd_string_min[2] ="  ";	
 2a6:	9e 83       	std	Y+6, r25	; 0x06
 2a8:	8d 83       	std	Y+5, r24	; 0x05
	char lcd_root[4] ="    ";	
 2aa:	98 87       	std	Y+8, r25	; 0x08
 2ac:	8f 83       	std	Y+7, r24	; 0x07
 2ae:	9a 87       	std	Y+10, r25	; 0x0a
 2b0:	89 87       	std	Y+9, r24	; 0x09
	static int place = 5;			// Seconds place
	static int place_min = 2;		// Minutes place
	
		
    number_of_overflows++;
 2b2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <number_of_overflows.1951>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2b8:	86 30       	cpi	r24, 0x06	; 6
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <__vector_9+0x5c>
	char lcd_root[4] ="    ";	
	static int place = 5;			// Seconds place
	static int place_min = 2;		// Minutes place
	
		
    number_of_overflows++;
 2bc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <number_of_overflows.1951>
 2c0:	8f c0       	rjmp	.+286    	; 0x3e0 <__vector_9+0x17a>
    if (number_of_overflows >= 6)
    {
	    // Do this every 6 x 16 ms = 100 ms
	    number_of_overflows = 0;
 2c2:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <number_of_overflows.1951>

	    // WRITE YOUR CODE HERE
		tens++;		
 2c6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tens.1952>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
		
		if(tens == 10)			//if tens is 10 then:
 2cc:	8a 30       	cpi	r24, 0x0A	; 10
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <__vector_9+0x70>
    {
	    // Do this every 6 x 16 ms = 100 ms
	    number_of_overflows = 0;

	    // WRITE YOUR CODE HERE
		tens++;		
 2d0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tens.1952>
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <__vector_9+0x7e>
		
		if(tens == 10)			//if tens is 10 then:
		{
			tens = 0;			// tens become 0
 2d6:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tens.1952>
			secs++;				// seconds get increased	
 2da:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <secs.1953>
 2de:	8f 5f       	subi	r24, 0xFF	; 255
 2e0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <secs.1953>
		}
		
		if(secs == 10)			// if seconds reaches 10
 2e4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <secs.1953>
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	39 f4       	brne	.+14     	; 0x2fa <__vector_9+0x94>
			place = 4;			// position becomes 4
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <place.1960+0x1>
 2f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <place.1960>
 2f8:	16 c0       	rjmp	.+44     	; 0x326 <__vector_9+0xc0>
			
		if(secs==60)			// if seconds reach 60
 2fa:	8c 33       	cpi	r24, 0x3C	; 60
 2fc:	a1 f4       	brne	.+40     	; 0x326 <__vector_9+0xc0>
		{
			place = 5;			// place go back to 5
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <place.1960+0x1>
 306:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <place.1960>
			secs = 0;			// seconds become 0
 30a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <secs.1953>
			min++;				// minutes increase
 30e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <min.1954>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <min.1954>
			lcd_gotoxy(4,0);	// move the cursor to position 4
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_putc('0');		// and in that position write 0
 320:	80 e3       	ldi	r24, 0x30	; 48
 322:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
		}
		
		if(min == 10)			//if minutes reach 10
 326:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <min.1954>
 32a:	8a 30       	cpi	r24, 0x0A	; 10
 32c:	31 f4       	brne	.+12     	; 0x33a <__vector_9+0xd4>
			place_min = 1;		// change their position to 1
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		
		root = secs*secs;		// Count the square root of seconds
 33a:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <secs.1953>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	be 01       	movw	r22, r28
 342:	69 5f       	subi	r22, 0xF9	; 249
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	88 9f       	mul	r24, r24
 348:	c0 01       	movw	r24, r0
 34a:	11 24       	eor	r1, r1
 34c:	0e 94 5f 02 	call	0x4be	; 0x4be <__itoa_ncheck>
 350:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tens.1952>
 354:	4a e0       	ldi	r20, 0x0A	; 10
 356:	be 01       	movw	r22, r28
 358:	6f 5f       	subi	r22, 0xFF	; 255
 35a:	7f 4f       	sbci	r23, 0xFF	; 255
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 5f 02 	call	0x4be	; 0x4be <__itoa_ncheck>
 362:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <secs.1953>
 366:	4a e0       	ldi	r20, 0x0A	; 10
 368:	be 01       	movw	r22, r28
 36a:	6d 5f       	subi	r22, 0xFD	; 253
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 5f 02 	call	0x4be	; 0x4be <__itoa_ncheck>
 374:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <min.1954>
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	be 01       	movw	r22, r28
 37c:	6b 5f       	subi	r22, 0xFB	; 251
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 5f 02 	call	0x4be	; 0x4be <__itoa_ncheck>
		
		itoa(root, lcd_root,10);
		itoa(tens,lcd_string,10);		
		itoa(secs,lcd_strings,10);
		itoa(min,lcd_string_min,10);
		lcd_gotoxy(place_min, 0);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 38c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string_min);
 390:	ce 01       	movw	r24, r28
 392:	05 96       	adiw	r24, 0x05	; 5
 394:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		lcd_gotoxy(3,0);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	83 e0       	ldi	r24, 0x03	; 3
 39c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_gotoxy(place, 0);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <place.1960>
 3a6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_strings);
 3aa:	ce 01       	movw	r24, r28
 3ac:	03 96       	adiw	r24, 0x03	; 3
 3ae:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		lcd_gotoxy(6, 0);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_putc('.');
 3ba:	8e e2       	ldi	r24, 0x2E	; 46
 3bc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
		lcd_gotoxy(7,0);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	87 e0       	ldi	r24, 0x07	; 7
 3c4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		lcd_gotoxy(12,0);
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	8c e0       	ldi	r24, 0x0C	; 12
 3d4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_root);
 3d8:	ce 01       	movw	r24, r28
 3da:	07 96       	adiw	r24, 0x07	; 7
 3dc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    }
}
 3e0:	2a 96       	adiw	r28, 0x0a	; 10
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	cf 93       	push	r28
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	static uint8_t symbol = 0;
	static uint8_t position = 0;
	static uint8_t number_of_overflows = 0;
	number_of_overflows++;
 436:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <number_of_overflows.1969>
 43a:	8f 5f       	subi	r24, 0xFF	; 255
 43c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <number_of_overflows.1969>
	if (number_of_overflows >=6)
 440:	86 30       	cpi	r24, 0x06	; 6
 442:	58 f1       	brcs	.+86     	; 0x49a <__vector_16+0x88>
	{
		lcd_gotoxy(1 + position, 1);
 444:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <position.1968>
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_putc(symbol);
 450:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 454:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
		
		number_of_overflows = 0;
 458:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <number_of_overflows.1969>

		symbol++;
 45c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
		if( symbol == 4)			// When symbol reach 4
 466:	84 30       	cpi	r24, 0x04	; 4
 468:	39 f4       	brne	.+14     	; 0x478 <__vector_16+0x66>
		{
			position++;				// We start from other position
 46a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <position.1968>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <position.1968>
			symbol = 0;				// And symbol goes again from 0
 474:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		}	
		
		if (position == 9)			// When position reach 9
 478:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <position.1968>
 47c:	89 30       	cpi	r24, 0x09	; 9
 47e:	69 f4       	brne	.+26     	; 0x49a <__vector_16+0x88>
		{
			position = 0;			// We go back to the first position
 480:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <position.1968>
 484:	c0 e0       	ldi	r28, 0x00	; 0
			for(int i = 0; i<=9; i++)
			{
				lcd_gotoxy(i,1);	// Go through all the progress bar
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	8c 2f       	mov	r24, r28
 48a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
				lcd_putc(' ');		// And clear it 
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 494:	cf 5f       	subi	r28, 0xFF	; 255
		}	
		
		if (position == 9)			// When position reach 9
		{
			position = 0;			// We go back to the first position
			for(int i = 0; i<=9; i++)
 496:	ca 30       	cpi	r28, 0x0A	; 10
 498:	b1 f7       	brne	.-20     	; 0x486 <__vector_16+0x74>
				lcd_gotoxy(i,1);	// Go through all the progress bar
				lcd_putc(' ');		// And clear it 
			}
		}
	}
}
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	cf 91       	pop	r28
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__itoa_ncheck>:
 4be:	bb 27       	eor	r27, r27
 4c0:	4a 30       	cpi	r20, 0x0A	; 10
 4c2:	31 f4       	brne	.+12     	; 0x4d0 <__itoa_ncheck+0x12>
 4c4:	99 23       	and	r25, r25
 4c6:	22 f4       	brpl	.+8      	; 0x4d0 <__itoa_ncheck+0x12>
 4c8:	bd e2       	ldi	r27, 0x2D	; 45
 4ca:	90 95       	com	r25
 4cc:	81 95       	neg	r24
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__utoa_common>

000004d4 <__utoa_ncheck>:
 4d4:	bb 27       	eor	r27, r27

000004d6 <__utoa_common>:
 4d6:	fb 01       	movw	r30, r22
 4d8:	55 27       	eor	r21, r21
 4da:	aa 27       	eor	r26, r26
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	aa 1f       	adc	r26, r26
 4e2:	a4 17       	cp	r26, r20
 4e4:	10 f0       	brcs	.+4      	; 0x4ea <__utoa_common+0x14>
 4e6:	a4 1b       	sub	r26, r20
 4e8:	83 95       	inc	r24
 4ea:	50 51       	subi	r21, 0x10	; 16
 4ec:	b9 f7       	brne	.-18     	; 0x4dc <__utoa_common+0x6>
 4ee:	a0 5d       	subi	r26, 0xD0	; 208
 4f0:	aa 33       	cpi	r26, 0x3A	; 58
 4f2:	08 f0       	brcs	.+2      	; 0x4f6 <__utoa_common+0x20>
 4f4:	a9 5d       	subi	r26, 0xD9	; 217
 4f6:	a1 93       	st	Z+, r26
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	79 f7       	brne	.-34     	; 0x4da <__utoa_common+0x4>
 4fc:	b1 11       	cpse	r27, r1
 4fe:	b1 93       	st	Z+, r27
 500:	11 92       	st	Z+, r1
 502:	cb 01       	movw	r24, r22
 504:	0c 94 84 02 	jmp	0x508	; 0x508 <strrev>

00000508 <strrev>:
 508:	dc 01       	movw	r26, r24
 50a:	fc 01       	movw	r30, r24
 50c:	67 2f       	mov	r22, r23
 50e:	71 91       	ld	r23, Z+
 510:	77 23       	and	r23, r23
 512:	e1 f7       	brne	.-8      	; 0x50c <strrev+0x4>
 514:	32 97       	sbiw	r30, 0x02	; 2
 516:	04 c0       	rjmp	.+8      	; 0x520 <strrev+0x18>
 518:	7c 91       	ld	r23, X
 51a:	6d 93       	st	X+, r22
 51c:	70 83       	st	Z, r23
 51e:	62 91       	ld	r22, -Z
 520:	ae 17       	cp	r26, r30
 522:	bf 07       	cpc	r27, r31
 524:	c8 f3       	brcs	.-14     	; 0x518 <strrev+0x10>
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
