
Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090a  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000689  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fc  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033f  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  82:	2d 98       	cbi	0x05, 5	; 5
        // Pause several miliseconds
        _delay_ms(SHORT_DELAY);

        // Invert LED in Data Register
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN);
  84:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	34 e3       	ldi	r19, 0x34	; 52
  8a:	4c e0       	ldi	r20, 0x0C	; 12
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	30 40       	sbci	r19, 0x00	; 0
  90:	40 40       	sbci	r20, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xc>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x16>
  96:	00 00       	nop
  98:	95 b1       	in	r25, 0x05	; 5
  9a:	98 27       	eor	r25, r24
  9c:	95 b9       	out	0x05, r25	; 5
  9e:	5f ef       	ldi	r21, 0xFF	; 255
  a0:	99 e6       	ldi	r25, 0x69	; 105
  a2:	28 e1       	ldi	r18, 0x18	; 24
  a4:	51 50       	subi	r21, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	20 40       	sbci	r18, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
  b0:	24 e0       	ldi	r18, 0x04	; 4
  b2:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(LONG_DELAY);
		for(int i = 0; i < 4; i++)
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	98 27       	eor	r25, r24
  b8:	95 b9       	out	0x05, r25	; 5
  ba:	4f ef       	ldi	r20, 0xFF	; 255
  bc:	54 e3       	ldi	r21, 0x34	; 52
  be:	9c e0       	ldi	r25, 0x0C	; 12
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	50 40       	sbci	r21, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x40>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	31 09       	sbc	r19, r1

        // Invert LED in Data Register
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN);
		_delay_ms(LONG_DELAY);
		for(int i = 0; i < 4; i++)
  d0:	89 f7       	brne	.-30     	; 0xb4 <main+0x34>
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
			_delay_ms(SHORT_DELAY);
		}
		
		PORTB = PORTB ^ (1<<LED_GREEN);
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	98 27       	eor	r25, r24
  d6:	95 b9       	out	0x05, r25	; 5
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	39 e6       	ldi	r19, 0x69	; 105
  dc:	48 e1       	ldi	r20, 0x18	; 24
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x68>
  e8:	00 00       	nop
		_delay_ms(LONG_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	98 27       	eor	r25, r24
  ee:	95 b9       	out	0x05, r25	; 5
  f0:	5f ef       	ldi	r21, 0xFF	; 255
  f2:	94 e3       	ldi	r25, 0x34	; 52
  f4:	2c e0       	ldi	r18, 0x0C	; 12
  f6:	51 50       	subi	r21, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
 102:	95 b1       	in	r25, 0x05	; 5
 104:	98 27       	eor	r25, r24
 106:	95 b9       	out	0x05, r25	; 5
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	49 e6       	ldi	r20, 0x69	; 105
 10c:	58 e1       	ldi	r21, 0x18	; 24
 10e:	31 50       	subi	r19, 0x01	; 1
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	50 40       	sbci	r21, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x8e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x98>
 118:	00 00       	nop
 11a:	24 e0       	ldi	r18, 0x04	; 4
 11c:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(LONG_DELAY);
		for(int i = 0; i < 4; i++)
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
 11e:	95 b1       	in	r25, 0x05	; 5
 120:	98 27       	eor	r25, r24
 122:	95 b9       	out	0x05, r25	; 5
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	44 e3       	ldi	r20, 0x34	; 52
 128:	5c e0       	ldi	r21, 0x0C	; 12
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	40 40       	sbci	r20, 0x00	; 0
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
		_delay_ms(LONG_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
		_delay_ms(SHORT_DELAY);
		PORTB = PORTB ^ (1<<LED_GREEN);
		_delay_ms(LONG_DELAY);
		for(int i = 0; i < 4; i++)
 13a:	89 f7       	brne	.-30     	; 0x11e <main+0x9e>
 13c:	23 e0       	ldi	r18, 0x03	; 3
 13e:	30 e0       	ldi	r19, 0x00	; 0
			PORTB = PORTB ^ (1<<LED_GREEN);
			_delay_ms(SHORT_DELAY);
		}
		for(int i = 0; i < 3; i++)
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
 140:	95 b1       	in	r25, 0x05	; 5
 142:	98 27       	eor	r25, r24
 144:	95 b9       	out	0x05, r25	; 5
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	49 e6       	ldi	r20, 0x69	; 105
 14a:	58 e1       	ldi	r21, 0x18	; 24
 14c:	91 50       	subi	r25, 0x01	; 1
 14e:	40 40       	sbci	r20, 0x00	; 0
 150:	50 40       	sbci	r21, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xcc>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xd6>
 156:	00 00       	nop
			_delay_ms(LONG_DELAY);
			PORTB = PORTB ^ (1<<LED_GREEN);
 158:	95 b1       	in	r25, 0x05	; 5
 15a:	98 27       	eor	r25, r24
 15c:	95 b9       	out	0x05, r25	; 5
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	44 e3       	ldi	r20, 0x34	; 52
 162:	5c e0       	ldi	r21, 0x0C	; 12
 164:	91 50       	subi	r25, 0x01	; 1
 166:	40 40       	sbci	r20, 0x00	; 0
 168:	50 40       	sbci	r21, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xe4>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xee>
 16e:	00 00       	nop
 170:	21 50       	subi	r18, 0x01	; 1
 172:	31 09       	sbc	r19, r1
		for(int i = 0; i < 4; i++)
		{
			PORTB = PORTB ^ (1<<LED_GREEN);
			_delay_ms(SHORT_DELAY);
		}
		for(int i = 0; i < 3; i++)
 174:	29 f7       	brne	.-54     	; 0x140 <main+0xc0>
 176:	87 cf       	rjmp	.-242    	; 0x86 <main+0x6>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
