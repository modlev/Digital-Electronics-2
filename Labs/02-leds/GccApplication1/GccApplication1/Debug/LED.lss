
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088c  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  00001173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001af5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 * Make a Knight Rider with 5 LEDs
 */
int main(void)
{
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_1);
  80:	21 9a       	sbi	0x04, 1	; 4
	DDRB = DDRB | (1<<LED_2);
  82:	25 9a       	sbi	0x04, 5	; 4
	DDRC = DDRC | (1<<LED_3);
  84:	38 9a       	sbi	0x07, 0	; 7
	DDRC = DDRC | (1<<LED_4);
  86:	3a 9a       	sbi	0x07, 2	; 7
	DDRC = DDRC | (1<<LED_5);
  88:	3d 9a       	sbi	0x07, 5	; 7
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_1);
  8a:	29 98       	cbi	0x05, 1	; 5
	PORTB = PORTB & ~(1<<LED_2);
  8c:	2d 98       	cbi	0x05, 5	; 5
	PORTC = PORTC & ~(1<<LED_3);
  8e:	40 98       	cbi	0x08, 0	; 8
	PORTC = PORTC & ~(1<<LED_4);
  90:	42 98       	cbi	0x08, 2	; 8
	PORTC = PORTC & ~(1<<LED_5);
  92:	45 98       	cbi	0x08, 5	; 8

    // Infinite loop
    while (1)
    {
		PORTB = PORTB^(1<<LED_1);  
  94:	42 e0       	ldi	r20, 0x02	; 2
		_delay_ms(BLINK_DELAY);
		PORTB = PORTB^(1<<LED_1);  
		PORTB = PORTB^(1<<LED_2);  
  96:	80 e2       	ldi	r24, 0x20	; 32
		_delay_ms(BLINK_DELAY);
		PORTB = PORTB^(1<<LED_2);
		PORTC = PORTC^(1<<LED_3);
  98:	21 e0       	ldi	r18, 0x01	; 1
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_3);
		PORTC = PORTC^(1<<LED_4);
  9a:	94 e0       	ldi	r25, 0x04	; 4
	PORTC = PORTC & ~(1<<LED_5);

    // Infinite loop
    while (1)
    {
		PORTB = PORTB^(1<<LED_1);  
  9c:	35 b1       	in	r19, 0x05	; 5
  9e:	34 27       	eor	r19, r20
  a0:	35 b9       	out	0x05, r19	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	53 ec       	ldi	r21, 0xC3	; 195
  a6:	69 e0       	ldi	r22, 0x09	; 9
  a8:	31 50       	subi	r19, 0x01	; 1
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTB = PORTB^(1<<LED_1);  
  b4:	35 b1       	in	r19, 0x05	; 5
  b6:	34 27       	eor	r19, r20
  b8:	35 b9       	out	0x05, r19	; 5
		PORTB = PORTB^(1<<LED_2);  
  ba:	35 b1       	in	r19, 0x05	; 5
  bc:	38 27       	eor	r19, r24
  be:	35 b9       	out	0x05, r19	; 5
  c0:	3f ef       	ldi	r19, 0xFF	; 255
  c2:	53 ec       	ldi	r21, 0xC3	; 195
  c4:	69 e0       	ldi	r22, 0x09	; 9
  c6:	31 50       	subi	r19, 0x01	; 1
  c8:	50 40       	sbci	r21, 0x00	; 0
  ca:	60 40       	sbci	r22, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x46>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x50>
  d0:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTB = PORTB^(1<<LED_2);
  d2:	35 b1       	in	r19, 0x05	; 5
  d4:	38 27       	eor	r19, r24
  d6:	35 b9       	out	0x05, r19	; 5
		PORTC = PORTC^(1<<LED_3);
  d8:	38 b1       	in	r19, 0x08	; 8
  da:	32 27       	eor	r19, r18
  dc:	38 b9       	out	0x08, r19	; 8
  de:	3f ef       	ldi	r19, 0xFF	; 255
  e0:	53 ec       	ldi	r21, 0xC3	; 195
  e2:	69 e0       	ldi	r22, 0x09	; 9
  e4:	31 50       	subi	r19, 0x01	; 1
  e6:	50 40       	sbci	r21, 0x00	; 0
  e8:	60 40       	sbci	r22, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_3);
  f0:	38 b1       	in	r19, 0x08	; 8
  f2:	32 27       	eor	r19, r18
  f4:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC^(1<<LED_4);
  f6:	38 b1       	in	r19, 0x08	; 8
  f8:	39 27       	eor	r19, r25
  fa:	38 b9       	out	0x08, r19	; 8
  fc:	3f ef       	ldi	r19, 0xFF	; 255
  fe:	53 ec       	ldi	r21, 0xC3	; 195
 100:	69 e0       	ldi	r22, 0x09	; 9
 102:	31 50       	subi	r19, 0x01	; 1
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	60 40       	sbci	r22, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x82>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x8c>
 10c:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_4);
 10e:	38 b1       	in	r19, 0x08	; 8
 110:	39 27       	eor	r19, r25
 112:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC^(1<<LED_5);
 114:	38 b1       	in	r19, 0x08	; 8
 116:	38 27       	eor	r19, r24
 118:	38 b9       	out	0x08, r19	; 8
 11a:	3f ef       	ldi	r19, 0xFF	; 255
 11c:	53 ec       	ldi	r21, 0xC3	; 195
 11e:	69 e0       	ldi	r22, 0x09	; 9
 120:	31 50       	subi	r19, 0x01	; 1
 122:	50 40       	sbci	r21, 0x00	; 0
 124:	60 40       	sbci	r22, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xa0>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xaa>
 12a:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_5);
 12c:	38 b1       	in	r19, 0x08	; 8
 12e:	38 27       	eor	r19, r24
 130:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC^(1<<LED_4);
 132:	38 b1       	in	r19, 0x08	; 8
 134:	39 27       	eor	r19, r25
 136:	38 b9       	out	0x08, r19	; 8
 138:	3f ef       	ldi	r19, 0xFF	; 255
 13a:	53 ec       	ldi	r21, 0xC3	; 195
 13c:	69 e0       	ldi	r22, 0x09	; 9
 13e:	31 50       	subi	r19, 0x01	; 1
 140:	50 40       	sbci	r21, 0x00	; 0
 142:	60 40       	sbci	r22, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xbe>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xc8>
 148:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_4);
 14a:	38 b1       	in	r19, 0x08	; 8
 14c:	39 27       	eor	r19, r25
 14e:	38 b9       	out	0x08, r19	; 8
		PORTC = PORTC^(1<<LED_3);
 150:	38 b1       	in	r19, 0x08	; 8
 152:	32 27       	eor	r19, r18
 154:	38 b9       	out	0x08, r19	; 8
 156:	3f ef       	ldi	r19, 0xFF	; 255
 158:	53 ec       	ldi	r21, 0xC3	; 195
 15a:	69 e0       	ldi	r22, 0x09	; 9
 15c:	31 50       	subi	r19, 0x01	; 1
 15e:	50 40       	sbci	r21, 0x00	; 0
 160:	60 40       	sbci	r22, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xdc>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xe6>
 166:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTC = PORTC^(1<<LED_3);
 168:	38 b1       	in	r19, 0x08	; 8
 16a:	32 27       	eor	r19, r18
 16c:	38 b9       	out	0x08, r19	; 8
		PORTB = PORTB^(1<<LED_2);
 16e:	35 b1       	in	r19, 0x05	; 5
 170:	38 27       	eor	r19, r24
 172:	35 b9       	out	0x05, r19	; 5
 174:	3f ef       	ldi	r19, 0xFF	; 255
 176:	53 ec       	ldi	r21, 0xC3	; 195
 178:	69 e0       	ldi	r22, 0x09	; 9
 17a:	31 50       	subi	r19, 0x01	; 1
 17c:	50 40       	sbci	r21, 0x00	; 0
 17e:	60 40       	sbci	r22, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0xfa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x104>
 184:	00 00       	nop
		_delay_ms(BLINK_DELAY);
		PORTB = PORTB^(1<<LED_2);
 186:	35 b1       	in	r19, 0x05	; 5
 188:	38 27       	eor	r19, r24
 18a:	35 b9       	out	0x05, r19	; 5
 18c:	87 cf       	rjmp	.-242    	; 0x9c <main+0x1c>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
