
Door_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000007ba  0000084e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  0080017e  0080017e  000008cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001724  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b07  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbb  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  00003ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df1  00000000  00000000  0000426b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 83 03 	jmp	0x706	; 0x706 <__vector_18>
  4c:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <main>
  9e:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	5a 9a       	sbi	0x0b, 2	; 11
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	5a 98       	cbi	0x0b, 2	; 11
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	5b 9a       	sbi	0x0b, 3	; 11
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	5b 98       	cbi	0x0b, 3	; 11
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <ArrayComparison>:
#include <stdint.h>
/* Function definitions ----------------------------------------------*/
uint8_t scanKeyboard();
int determineKey(uint8_t scannedKey);
int ArrayComparison(int a[2][4], int b[], int size)
{
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	fc 01       	movw	r30, r24
 1f6:	40 96       	adiw	r24, 0x10	; 16
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <ArrayComparison+0x34>
	int cor=0;
	for(int j = 0; j < 2;j++)
	{
		for(int i = 0; i<4;i++)
		{
			if(a[j][i] == b[i])
 1fa:	41 91       	ld	r20, Z+
 1fc:	51 91       	ld	r21, Z+
 1fe:	2d 91       	ld	r18, X+
 200:	3d 91       	ld	r19, X+
 202:	42 17       	cp	r20, r18
 204:	53 07       	cpc	r21, r19
 206:	29 f4       	brne	.+10     	; 0x212 <ArrayComparison+0x26>
			{
				cor++;
 208:	0f 5f       	subi	r16, 0xFF	; 255
 20a:	1f 4f       	sbci	r17, 0xFF	; 255
				if(cor == 4)
 20c:	04 30       	cpi	r16, 0x04	; 4
 20e:	11 05       	cpc	r17, r1
 210:	71 f0       	breq	.+28     	; 0x22e <ArrayComparison+0x42>
int ArrayComparison(int a[2][4], int b[], int size)
{
	int cor=0;
	for(int j = 0; j < 2;j++)
	{
		for(int i = 0; i<4;i++)
 212:	ec 17       	cp	r30, r28
 214:	fd 07       	cpc	r31, r29
 216:	89 f7       	brne	.-30     	; 0x1fa <ArrayComparison+0xe>
 218:	fe 01       	movw	r30, r28
uint8_t scanKeyboard();
int determineKey(uint8_t scannedKey);
int ArrayComparison(int a[2][4], int b[], int size)
{
	int cor=0;
	for(int j = 0; j < 2;j++)
 21a:	c8 17       	cp	r28, r24
 21c:	d9 07       	cpc	r29, r25
 21e:	51 f0       	breq	.+20     	; 0x234 <ArrayComparison+0x48>
 220:	a6 2f       	mov	r26, r22
 222:	b7 2f       	mov	r27, r23
 224:	ef 01       	movw	r28, r30
 226:	28 96       	adiw	r28, 0x08	; 8
#include <stdint.h>
/* Function definitions ----------------------------------------------*/
uint8_t scanKeyboard();
int determineKey(uint8_t scannedKey);
int ArrayComparison(int a[2][4], int b[], int size)
{
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	e6 cf       	rjmp	.-52     	; 0x1fa <ArrayComparison+0xe>
		{
			if(a[j][i] == b[i])
			{
				cor++;
				if(cor == 4)
				return 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <ArrayComparison+0x4c>
			}
		}
		cor=0;
	}

	return 0;
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <setup>:
void setup(){
	//LED's
	DDRD = DDRD | (1<<LED_RED);
 242:	51 9a       	sbi	0x0a, 1	; 10
	DDRD = DDRD | (1<<LED_GREEN);
 244:	50 9a       	sbi	0x0a, 0	; 10
	
	PORTD = PORTD & ~(1<<LED_RED);
 246:	59 98       	cbi	0x0b, 1	; 11
	PORTD = PORTD & ~(1<<LED_GREEN);
 248:	58 98       	cbi	0x0b, 0	; 11
	
	//Columns
	DDRC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 24a:	87 b1       	in	r24, 0x07	; 7
 24c:	80 67       	ori	r24, 0x70	; 112
 24e:	87 b9       	out	0x07, r24	; 7
	
	//Set all columns to high 0b10101000
	PORTC  |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 250:	88 b1       	in	r24, 0x08	; 8
 252:	80 67       	ori	r24, 0x70	; 112
 254:	88 b9       	out	0x08, r24	; 8
	
	//Rows implicitly defined as inputs
	//Turn on internal pull ups for the rows
	DDRB = 0x00;
 256:	14 b8       	out	0x04, r1	; 4
	PORTB |= (1<<ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4);
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	8f 60       	ori	r24, 0x0F	; 15
 25c:	85 b9       	out	0x05, r24	; 5
 25e:	08 95       	ret

00000260 <scanKeyboard>:

uint8_t scanKeyboard()
{
	
	
	PORTC  |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 260:	88 b1       	in	r24, 0x08	; 8
 262:	80 67       	ori	r24, 0x70	; 112
 264:	88 b9       	out	0x08, r24	; 8

	
	//variable that will store the state of the row pins
	uint8_t rowState = PORTB;
 266:	85 b1       	in	r24, 0x05	; 5
	uint8_t masker = 0b00001111;
	for(int i = 4; i < 7; i++)
	{
		PORTC &= ~(1 << i);
 268:	44 98       	cbi	0x08, 4	; 8
		
		//Read all rows simultaneously and record the data to be used in if statements later for indicating the specific key pressed
		rowState = (masker & PINB);
 26a:	83 b1       	in	r24, 0x03	; 3
 26c:	8f 70       	andi	r24, 0x0F	; 15
		
		if(rowState != PORTB)
 26e:	95 b1       	in	r25, 0x05	; 5
 270:	89 17       	cp	r24, r25
 272:	49 f0       	breq	.+18     	; 0x286 <scanKeyboard+0x26>
		{
			return PORTC | rowState;
 274:	98 b1       	in	r25, 0x08	; 8
 276:	89 2b       	or	r24, r25
 278:	08 95       	ret
		}
		else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	80 67       	ori	r24, 0x70	; 112
 27e:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 280:	85 b1       	in	r24, 0x05	; 5
	}
	return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
		}
		else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 286:	88 b1       	in	r24, 0x08	; 8
 288:	80 67       	ori	r24, 0x70	; 112
 28a:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 28c:	85 b1       	in	r24, 0x05	; 5
	//variable that will store the state of the row pins
	uint8_t rowState = PORTB;
	uint8_t masker = 0b00001111;
	for(int i = 4; i < 7; i++)
	{
		PORTC &= ~(1 << i);
 28e:	45 98       	cbi	0x08, 5	; 8
		
		//Read all rows simultaneously and record the data to be used in if statements later for indicating the specific key pressed
		rowState = (masker & PINB);
 290:	83 b1       	in	r24, 0x03	; 3
 292:	8f 70       	andi	r24, 0x0F	; 15
		
		if(rowState != PORTB)
 294:	95 b1       	in	r25, 0x05	; 5
 296:	89 13       	cpse	r24, r25
 298:	ed cf       	rjmp	.-38     	; 0x274 <scanKeyboard+0x14>
		}
		else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 29a:	88 b1       	in	r24, 0x08	; 8
 29c:	80 67       	ori	r24, 0x70	; 112
 29e:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 2a0:	85 b1       	in	r24, 0x05	; 5
	//variable that will store the state of the row pins
	uint8_t rowState = PORTB;
	uint8_t masker = 0b00001111;
	for(int i = 4; i < 7; i++)
	{
		PORTC &= ~(1 << i);
 2a2:	46 98       	cbi	0x08, 6	; 8
		
		//Read all rows simultaneously and record the data to be used in if statements later for indicating the specific key pressed
		rowState = (masker & PINB);
 2a4:	83 b1       	in	r24, 0x03	; 3
 2a6:	8f 70       	andi	r24, 0x0F	; 15
		
		if(rowState != PORTB)
 2a8:	95 b1       	in	r25, 0x05	; 5
 2aa:	89 17       	cp	r24, r25
 2ac:	31 f3       	breq	.-52     	; 0x27a <scanKeyboard+0x1a>
 2ae:	e2 cf       	rjmp	.-60     	; 0x274 <scanKeyboard+0x14>

000002b0 <determineKey>:
}
	
int determineKey(uint8_t scannedKey)
{
		static int possition = 0;
		if (scannedKey == 0b01101110)
 2b0:	8e 36       	cpi	r24, 0x6E	; 110
 2b2:	f9 f4       	brne	.+62     	; 0x2f2 <determineKey+0x42>
		{
			//Do something that indicates 1 has been pressed
			lcd_gotoxy(possition,1);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2ba:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 2be:	80 e1       	ldi	r24, 0x10	; 16
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 2c6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2ca:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 2d0:	84 30       	cpi	r24, 0x04	; 4
 2d2:	91 05       	cpc	r25, r1
 2d4:	39 f0       	breq	.+14     	; 0x2e4 <determineKey+0x34>
		if (scannedKey == 0b01101110)
		{
			//Do something that indicates 1 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 2d6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 2da:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 1;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret
			//Do something that indicates 1 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 2e4:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 2e8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	08 95       	ret
		} 
		else if (scannedKey == 0b01011110)
 2f2:	8e 35       	cpi	r24, 0x5E	; 94
 2f4:	f9 f4       	brne	.+62     	; 0x334 <determineKey+0x84>
		{
			//Do something that indicates 2 has been pressed
			lcd_gotoxy(possition,1);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 2fc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 308:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 30c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 310:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 312:	84 30       	cpi	r24, 0x04	; 4
 314:	91 05       	cpc	r25, r1
 316:	39 f0       	breq	.+14     	; 0x326 <determineKey+0x76>
		else if (scannedKey == 0b01011110)
		{
			//Do something that indicates 2 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 318:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 31c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 2;
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret
			//Do something that indicates 2 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 326:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 32a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 2;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	08 95       	ret
		} 
		else if (scannedKey == 0b00111110)
 334:	8e 33       	cpi	r24, 0x3E	; 62
 336:	f9 f4       	brne	.+62     	; 0x376 <determineKey+0xc6>
		{
			//Do something that indicates 3 has been pressed
			lcd_gotoxy(possition,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 33e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 34a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 34e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 352:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 354:	84 30       	cpi	r24, 0x04	; 4
 356:	91 05       	cpc	r25, r1
 358:	39 f0       	breq	.+14     	; 0x368 <determineKey+0xb8>
		else if (scannedKey == 0b00111110)
		{
			//Do something that indicates 3 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 35a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 35e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 3;
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	08 95       	ret
			//Do something that indicates 3 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 368:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 36c:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 3;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret
		} 
		else if (scannedKey == 0b01101101)
 376:	8d 36       	cpi	r24, 0x6D	; 109
 378:	e9 f4       	brne	.+58     	; 0x3b4 <determineKey+0x104>
		{
			//Do something that indicates 4 has been pressed
			lcd_gotoxy(possition,1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 380:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 38c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 390:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 394:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	91 05       	cpc	r25, r1
 39a:	39 f0       	breq	.+14     	; 0x3aa <determineKey+0xfa>
		else if (scannedKey == 0b01101101)
		{
			//Do something that indicates 4 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 39c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 3a0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 4;
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret
			//Do something that indicates 4 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 3aa:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 3ae:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
 3b2:	08 95       	ret
			return 4;
		} 
		else if (scannedKey == 0b01011101)
 3b4:	8d 35       	cpi	r24, 0x5D	; 93
 3b6:	f9 f4       	brne	.+62     	; 0x3f6 <determineKey+0x146>
		{
			//Do something that indicates 5 has been pressed
			lcd_gotoxy(possition,1);
 3b8:	61 e0       	ldi	r22, 0x01	; 1
 3ba:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3be:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 3c2:	80 e1       	ldi	r24, 0x10	; 16
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 3ca:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 3ce:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 3d4:	84 30       	cpi	r24, 0x04	; 4
 3d6:	91 05       	cpc	r25, r1
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <determineKey+0x138>
		else if (scannedKey == 0b01011101)
		{
			//Do something that indicates 5 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 3da:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 3de:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 5;
 3e2:	85 e0       	ldi	r24, 0x05	; 5
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	08 95       	ret
			//Do something that indicates 5 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 3e8:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 3ec:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 5;
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	08 95       	ret
		} 
		else if (scannedKey == 0b00111101)
 3f6:	8d 33       	cpi	r24, 0x3D	; 61
 3f8:	f9 f4       	brne	.+62     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		{
			//Do something that indicates 6 has been pressed
			lcd_gotoxy(possition,1);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 400:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 404:	80 e1       	ldi	r24, 0x10	; 16
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 40c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 410:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 416:	84 30       	cpi	r24, 0x04	; 4
 418:	91 05       	cpc	r25, r1
 41a:	39 f0       	breq	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		else if (scannedKey == 0b00111101)
		{
			//Do something that indicates 6 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 41c:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 420:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 6;
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret
			//Do something that indicates 6 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 42a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 42e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 6;
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	08 95       	ret
		} 
		else if (scannedKey == 0b01101011)
 438:	8b 36       	cpi	r24, 0x6B	; 107
 43a:	f9 f4       	brne	.+62     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			//Do something that indicates 7 has been pressed
			lcd_gotoxy(possition,1);
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 442:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 44e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 452:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 456:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 458:	84 30       	cpi	r24, 0x04	; 4
 45a:	91 05       	cpc	r25, r1
 45c:	39 f0       	breq	.+14     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		else if (scannedKey == 0b01101011)
		{
			//Do something that indicates 7 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 45e:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 462:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 7;
 466:	87 e0       	ldi	r24, 0x07	; 7
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	08 95       	ret
			//Do something that indicates 7 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 46c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 470:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 7;
 474:	87 e0       	ldi	r24, 0x07	; 7
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	08 95       	ret
		} 
		else if (scannedKey == 0b01011011)
 47a:	8b 35       	cpi	r24, 0x5B	; 91
 47c:	f9 f4       	brne	.+62     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
		{
			//Do something that indicates 8 has been pressed
			lcd_gotoxy(possition,1);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 484:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 488:	80 e1       	ldi	r24, 0x10	; 16
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 490:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 494:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 498:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 49a:	84 30       	cpi	r24, 0x04	; 4
 49c:	91 05       	cpc	r25, r1
 49e:	39 f0       	breq	.+14     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
		else if (scannedKey == 0b01011011)
		{
			//Do something that indicates 8 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 4a0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 4a4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 8;
 4a8:	88 e0       	ldi	r24, 0x08	; 8
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	08 95       	ret
			//Do something that indicates 8 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 4ae:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 4b2:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 8;
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	08 95       	ret
		} 
		else if (scannedKey == 0b00111011)
 4bc:	8b 33       	cpi	r24, 0x3B	; 59
 4be:	f9 f4       	brne	.+62     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
		{
			//Do something that indicates 9 has been pressed
			lcd_gotoxy(possition,1);
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 4c6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 4ca:	80 e1       	ldi	r24, 0x10	; 16
 4cc:	91 e0       	ldi	r25, 0x01	; 1
 4ce:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 4d2:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 4d6:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 4da:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 4dc:	84 30       	cpi	r24, 0x04	; 4
 4de:	91 05       	cpc	r25, r1
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
		else if (scannedKey == 0b00111011)
		{
			//Do something that indicates 9 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 4e2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 4e6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 9;
 4ea:	89 e0       	ldi	r24, 0x09	; 9
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 95       	ret
			//Do something that indicates 9 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 4f0:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 4f4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 9;
 4f8:	89 e0       	ldi	r24, 0x09	; 9
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	08 95       	ret
		} 
		else if (scannedKey == 0b01100111)
 4fe:	87 36       	cpi	r24, 0x67	; 103
 500:	f9 f4       	brne	.+62     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
		{
			//Do something that indicates * has been pressed
			lcd_gotoxy(possition,1);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 508:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 50c:	80 e1       	ldi	r24, 0x10	; 16
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 514:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 518:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 51c:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	91 05       	cpc	r25, r1
 522:	39 f0       	breq	.+14     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		else if (scannedKey == 0b01100111)
		{
			//Do something that indicates * has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 524:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 528:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 10;
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	08 95       	ret
			//Do something that indicates * has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 532:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 536:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 10;
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	08 95       	ret
		} 
		else if (scannedKey == 0b01010111)
 540:	87 35       	cpi	r24, 0x57	; 87
 542:	f9 f4       	brne	.+62     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		{
			//Do something that indicates 0 has been pressed
			lcd_gotoxy(possition,1);
 544:	61 e0       	ldi	r22, 0x01	; 1
 546:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 54a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 54e:	80 e1       	ldi	r24, 0x10	; 16
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 556:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 55a:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 55e:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 560:	84 30       	cpi	r24, 0x04	; 4
 562:	91 05       	cpc	r25, r1
 564:	39 f0       	breq	.+14     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
		else if (scannedKey == 0b01010111)
		{
			//Do something that indicates 0 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 566:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 56a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 11;
 56e:	8b e0       	ldi	r24, 0x0B	; 11
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 95       	ret
			//Do something that indicates 0 has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 574:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 578:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 11;
 57c:	8b e0       	ldi	r24, 0x0B	; 11
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	08 95       	ret
		} 
		else if (scannedKey == 0b00110111)
 582:	87 33       	cpi	r24, 0x37	; 55
 584:	f9 f4       	brne	.+62     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
		{
			//Do something that indicates # has been pressed
			lcd_gotoxy(possition,1);
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 58c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
			lcd_puts("*");
 590:	80 e1       	ldi	r24, 0x10	; 16
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
			possition++;
 598:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 59c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 5a0:	01 96       	adiw	r24, 0x01	; 1
			if(possition==4)
 5a2:	84 30       	cpi	r24, 0x04	; 4
 5a4:	91 05       	cpc	r25, r1
 5a6:	39 f0       	breq	.+14     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
		else if (scannedKey == 0b00110111)
		{
			//Do something that indicates # has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
 5a8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 5ac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
			if(possition==4)
			possition = 0;
			return 12;
 5b0:	8c e0       	ldi	r24, 0x0C	; 12
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	08 95       	ret
			//Do something that indicates # has been pressed
			lcd_gotoxy(possition,1);
			lcd_puts("*");
			possition++;
			if(possition==4)
			possition = 0;
 5b6:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <__data_end+0x1>
 5ba:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			return 12;
 5be:	8c e0       	ldi	r24, 0x0C	; 12
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	08 95       	ret
		} 
		else 
		{
			return 15;
 5c4:	8f e0       	ldi	r24, 0x0F	; 15
 5c6:	90 e0       	ldi	r25, 0x00	; 0
		}
}
 5c8:	08 95       	ret

000005ca <main>:
	//Turn on internal pull ups for the rows
	DDRB = 0x00;
	PORTB |= (1<<ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4);
}
int main(void)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	68 97       	sbiw	r28, 0x18	; 24
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 5de:	8c e0       	ldi	r24, 0x0C	; 12
 5e0:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 5e4:	80 e4       	ldi	r24, 0x40	; 64
 5e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 5ea:	80 e8       	ldi	r24, 0x80	; 128
 5ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	
	// Display first custom character
	lcd_gotoxy(0,0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("Enter password:");
 5f8:	82 e1       	ldi	r24, 0x12	; 18
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	
	 setup();
 600:	0e 94 21 01 	call	0x242	; 0x242 <setup>
    sei();
	*/
    // Infinite loop
	int key;
	static int quantity = 0;
	int correct_num[2][4] ={{1, 2, 3, 4}, {5, 6, 7, 8}};
 604:	80 e1       	ldi	r24, 0x10	; 16
 606:	e0 e0       	ldi	r30, 0x00	; 0
 608:	f1 e0       	ldi	r31, 0x01	; 1
 60a:	de 01       	movw	r26, r28
 60c:	11 96       	adiw	r26, 0x01	; 1
 60e:	01 90       	ld	r0, Z+
 610:	0d 92       	st	X+, r0
 612:	8a 95       	dec	r24
 614:	e1 f7       	brne	.-8      	; 0x60e <main+0x44>
	int entered_num[4];
    while(1)
    {
		 key = determineKey(scanKeyboard());
		  _delay_ms(100);
		  entered_num[quantity]=key;
 616:	8e 01       	movw	r16, r28
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	c0 2e       	mov	r12, r16
 61e:	d1 2e       	mov	r13, r17
					  PORTD= PORTD^(1<<LED_GREEN);
				 }
				 else
				 {
					 lcd_puts("Inccorect code, try again in 10 seconds");
					 PORTD= PORTD^(1<<LED_RED);
 620:	68 94       	set
 622:	ee 24       	eor	r14, r14
 624:	e1 f8       	bld	r14, 1
	static int quantity = 0;
	int correct_num[2][4] ={{1, 2, 3, 4}, {5, 6, 7, 8}};
	int entered_num[4];
    while(1)
    {
		 key = determineKey(scanKeyboard());
 626:	0e 94 30 01 	call	0x260	; 0x260 <scanKeyboard>
 62a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <determineKey>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	31 ee       	ldi	r19, 0xE1	; 225
 632:	44 e0       	ldi	r20, 0x04	; 4
 634:	21 50       	subi	r18, 0x01	; 1
 636:	30 40       	sbci	r19, 0x00	; 0
 638:	40 40       	sbci	r20, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0x6a>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x74>
 63e:	00 00       	nop
		  _delay_ms(100);
		  entered_num[quantity]=key;
 640:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <quantity.2087>
 644:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <quantity.2087+0x1>
 648:	f9 01       	movw	r30, r18
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	e0 0f       	add	r30, r16
 650:	f1 1f       	adc	r31, r17
 652:	91 8b       	std	Z+17, r25	; 0x11
 654:	80 8b       	std	Z+16, r24	; 0x10
		 if(key != 15)
 656:	0f 97       	sbiw	r24, 0x0f	; 15
 658:	31 f3       	breq	.-52     	; 0x626 <main+0x5c>
		 {
			 quantity++;
 65a:	2f 5f       	subi	r18, 0xFF	; 255
 65c:	3f 4f       	sbci	r19, 0xFF	; 255
 65e:	30 93 81 01 	sts	0x0181, r19	; 0x800181 <quantity.2087+0x1>
 662:	20 93 80 01 	sts	0x0180, r18	; 0x800180 <quantity.2087>
			 if(quantity==4)
 666:	24 30       	cpi	r18, 0x04	; 4
 668:	31 05       	cpc	r19, r1
 66a:	e9 f6       	brne	.-70     	; 0x626 <main+0x5c>
			 {
				 quantity = 0;
 66c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <quantity.2087+0x1>
 670:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <quantity.2087>
				 lcd_gotoxy(0,1);
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
				 if(ArrayComparison(correct_num,entered_num,(sizeof(correct_num))/4))
 67c:	44 e0       	ldi	r20, 0x04	; 4
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	be 01       	movw	r22, r28
 682:	6f 5e       	subi	r22, 0xEF	; 239
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8c 2d       	mov	r24, r12
 688:	9d 2d       	mov	r25, r13
 68a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ArrayComparison>
 68e:	89 2b       	or	r24, r25
 690:	f1 f0       	breq	.+60     	; 0x6ce <main+0x104>
				 {
					  lcd_puts("Correct code");
 692:	82 e2       	ldi	r24, 0x22	; 34
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
					  PORTD= PORTD^(1<<LED_GREEN);
 69a:	8b b1       	in	r24, 0x0b	; 11
 69c:	ff 24       	eor	r15, r15
 69e:	f3 94       	inc	r15
 6a0:	8f 25       	eor	r24, r15
 6a2:	8b b9       	out	0x0b, r24	; 11
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	93 ed       	ldi	r25, 0xD3	; 211
 6a8:	20 e3       	ldi	r18, 0x30	; 48
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	90 40       	sbci	r25, 0x00	; 0
 6ae:	20 40       	sbci	r18, 0x00	; 0
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <main+0xe0>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <main+0xea>
 6b4:	00 00       	nop
					  _delay_ms(1000);
					  lcd_gotoxy(0,1);
 6b6:	61 e0       	ldi	r22, 0x01	; 1
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
					  lcd_puts("                                      ");
 6be:	8f e2       	ldi	r24, 0x2F	; 47
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
					  PORTD= PORTD^(1<<LED_GREEN);
 6c6:	8b b1       	in	r24, 0x0b	; 11
 6c8:	f8 26       	eor	r15, r24
 6ca:	fb b8       	out	0x0b, r15	; 11
 6cc:	ac cf       	rjmp	.-168    	; 0x626 <main+0x5c>
				 }
				 else
				 {
					 lcd_puts("Inccorect code, try again in 10 seconds");
 6ce:	86 e5       	ldi	r24, 0x56	; 86
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
					 PORTD= PORTD^(1<<LED_RED);
 6d6:	8b b1       	in	r24, 0x0b	; 11
 6d8:	8e 25       	eor	r24, r14
 6da:	8b b9       	out	0x0b, r24	; 11
 6dc:	3f ef       	ldi	r19, 0xFF	; 255
 6de:	43 ed       	ldi	r20, 0xD3	; 211
 6e0:	80 e3       	ldi	r24, 0x30	; 48
 6e2:	31 50       	subi	r19, 0x01	; 1
 6e4:	40 40       	sbci	r20, 0x00	; 0
 6e6:	80 40       	sbci	r24, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x118>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x122>
 6ec:	00 00       	nop
					 _delay_ms(1000);
					 lcd_gotoxy(0,1);
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
					 lcd_puts("                                      ");
 6f6:	8f e2       	ldi	r24, 0x2F	; 47
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
					 PORTD= PORTD^(1<<LED_RED);
 6fe:	8b b1       	in	r24, 0x0b	; 11
 700:	8e 25       	eor	r24, r14
 702:	8b b9       	out	0x0b, r24	; 11
 704:	90 cf       	rjmp	.-224    	; 0x626 <main+0x5c>

00000706 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 706:	1f 92       	push	r1
 708:	0f 92       	push	r0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	0f 92       	push	r0
 70e:	11 24       	eor	r1, r1
 710:	2f 93       	push	r18
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	ef 93       	push	r30
 718:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 71a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 71e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 722:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 724:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <UART_RxHead>
 728:	ef 5f       	subi	r30, 0xFF	; 255
 72a:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 72c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <UART_RxTail>
 730:	e9 17       	cp	r30, r25
 732:	39 f0       	breq	.+14     	; 0x742 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 734:	e0 93 84 01 	sts	0x0184, r30	; 0x800184 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	e9 57       	subi	r30, 0x79	; 121
 73c:	fe 4f       	sbci	r31, 0xFE	; 254
 73e:	20 83       	st	Z, r18
 740:	01 c0       	rjmp	.+2      	; 0x744 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 742:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 744:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <UART_LastRxError>
 748:	89 2b       	or	r24, r25
 74a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <UART_LastRxError>
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	2f 91       	pop	r18
 758:	0f 90       	pop	r0
 75a:	0f be       	out	0x3f, r0	; 63
 75c:	0f 90       	pop	r0
 75e:	1f 90       	pop	r1
 760:	18 95       	reti

00000762 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 774:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_TxHead>
 778:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <UART_TxTail>
 77c:	98 17       	cp	r25, r24
 77e:	69 f0       	breq	.+26     	; 0x79a <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 780:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <UART_TxTail>
 784:	ef 5f       	subi	r30, 0xFF	; 255
 786:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 788:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	e9 53       	subi	r30, 0x39	; 57
 790:	fe 4f       	sbci	r31, 0xFE	; 254
 792:	80 81       	ld	r24, Z
 794:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 798:	05 c0       	rjmp	.+10     	; 0x7a4 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 79a:	e1 ec       	ldi	r30, 0xC1	; 193
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	8f 7d       	andi	r24, 0xDF	; 223
 7a2:	80 83       	st	Z, r24
    }
}
 7a4:	ff 91       	pop	r31
 7a6:	ef 91       	pop	r30
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
