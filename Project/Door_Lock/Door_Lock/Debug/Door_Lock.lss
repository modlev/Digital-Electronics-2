
Door_Lock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  00800206  00800206  00000ab2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002305  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00002fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001069  00000000  00000000  00003ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00004d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001386  00000000  00000000  000057f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00006b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_18>
  4c:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 39       	cpi	r26, 0x93	; 147
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
  9e:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Unlock>:
#include "gpio.h"
#include "function.h"
	void Unlock()
	{
		// Output to the lock is high
		GPIO_write_high(&PORTC,Lock);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	88 e2       	ldi	r24, 0x28	; 40
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <Unlock+0x10>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <Unlock+0x1a>
  c0:	00 00       	nop
		_delay_ms(100);
		// Output is set low again
		GPIO_write_low(&PORTC,Lock);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	88 e2       	ldi	r24, 0x28	; 40
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <GPIO_write_low>
  cc:	08 95       	ret

000000ce <Buzzer_sound>:
	}
	void Buzzer_sound()
	{
		// Output to the buzzes is set to high
		GPIO_write_high(&PORTC,Buzzer);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	88 e2       	ldi	r24, 0x28	; 40
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <GPIO_write_high>
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	85 ea       	ldi	r24, 0xA5	; 165
  dc:	9e e0       	ldi	r25, 0x0E	; 14
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <Buzzer_sound+0x10>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Buzzer_sound+0x1a>
  e8:	00 00       	nop
		_delay_ms(300);
		// Output is set low again
		GPIO_write_low(&PORTC,Buzzer);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	88 e2       	ldi	r24, 0x28	; 40
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <GPIO_write_low>
  f4:	08 95       	ret

000000f6 <RedBlink>:
	}
	void RedBlink()
	{
		// RED LED is turned on
		GPIO_toggle(&PORTD,LED_RED);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	8b e2       	ldi	r24, 0x2B	; 43
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GPIO_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <RedBlink+0xc>
 106:	00 00       	nop
		// Short delay
		_delay_us(1);
		// The text is cleaned in the 2nd line
		lcd_gotoxy(0,1);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("                                      ");
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		// RED LED is turned off
		GPIO_toggle(&PORTD,LED_RED);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	8b e2       	ldi	r24, 0x2B	; 43
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GPIO_toggle>
 126:	08 95       	ret

00000128 <GreenBlink>:
	}
	void GreenBlink()
	{
		// GREEN led is turned on
		GPIO_toggle(&PORTD,LED_GREEN);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GPIO_toggle>
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	8a 95       	dec	r24
 136:	f1 f7       	brne	.-4      	; 0x134 <GreenBlink+0xc>
 138:	00 00       	nop
		// Short delay
		_delay_us(1);
		// The text in the 2nd line is deleted
		lcd_gotoxy(0,1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("                                      ");
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		// GREEN LED is tunred off
		GPIO_toggle(&PORTD,LED_GREEN);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8b e2       	ldi	r24, 0x2B	; 43
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GPIO_toggle>
 158:	08 95       	ret

0000015a <scanKeyboard>:
	}
	uint8_t scanKeyboard()
	{
		
		
		PORTC  |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 15a:	88 b1       	in	r24, 0x08	; 8
 15c:	80 67       	ori	r24, 0x70	; 112
 15e:	88 b9       	out	0x08, r24	; 8

		
		//variable that will store the state of the row pins
		uint8_t rowState = PORTB;
 160:	85 b1       	in	r24, 0x05	; 5
		// A mask for the variable
		uint8_t masker = 0b00001111;
		// Reading 4, 5, 6 ports of PORTC
		for(int i = 4; i < 7; i++)
		{
			PORTC &= ~(1 << i);
 162:	44 98       	cbi	0x08, 4	; 8
			
			/*Read all rows simultaneously and record 
			  the data to be used in if statements later
			  for indicating the specific key pressed*/
			rowState = (masker & PINB);
 164:	83 b1       	in	r24, 0x03	; 3
 166:	8f 70       	andi	r24, 0x0F	; 15
			
			if(rowState != PORTB)
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	89 17       	cp	r24, r25
 16c:	49 f0       	breq	.+18     	; 0x180 <scanKeyboard+0x26>
			{
				return PORTC | rowState;
 16e:	98 b1       	in	r25, 0x08	; 8
 170:	89 2b       	or	r24, r25
 172:	08 95       	ret
			}
			else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 174:	88 b1       	in	r24, 0x08	; 8
 176:	80 67       	ori	r24, 0x70	; 112
 178:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 17a:	85 b1       	in	r24, 0x05	; 5
		}
		return 0;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
			}
			else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	80 67       	ori	r24, 0x70	; 112
 184:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 186:	85 b1       	in	r24, 0x05	; 5
		// A mask for the variable
		uint8_t masker = 0b00001111;
		// Reading 4, 5, 6 ports of PORTC
		for(int i = 4; i < 7; i++)
		{
			PORTC &= ~(1 << i);
 188:	45 98       	cbi	0x08, 5	; 8
			
			/*Read all rows simultaneously and record 
			  the data to be used in if statements later
			  for indicating the specific key pressed*/
			rowState = (masker & PINB);
 18a:	83 b1       	in	r24, 0x03	; 3
 18c:	8f 70       	andi	r24, 0x0F	; 15
			
			if(rowState != PORTB)
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	89 13       	cpse	r24, r25
 192:	ed cf       	rjmp	.-38     	; 0x16e <scanKeyboard+0x14>
			}
			else {}


			//Reset
			PORTC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 194:	88 b1       	in	r24, 0x08	; 8
 196:	80 67       	ori	r24, 0x70	; 112
 198:	88 b9       	out	0x08, r24	; 8
			rowState = PORTB;
 19a:	85 b1       	in	r24, 0x05	; 5
		// A mask for the variable
		uint8_t masker = 0b00001111;
		// Reading 4, 5, 6 ports of PORTC
		for(int i = 4; i < 7; i++)
		{
			PORTC &= ~(1 << i);
 19c:	46 98       	cbi	0x08, 6	; 8
			
			/*Read all rows simultaneously and record 
			  the data to be used in if statements later
			  for indicating the specific key pressed*/
			rowState = (masker & PINB);
 19e:	83 b1       	in	r24, 0x03	; 3
 1a0:	8f 70       	andi	r24, 0x0F	; 15
			
			if(rowState != PORTB)
 1a2:	95 b1       	in	r25, 0x05	; 5
 1a4:	89 17       	cp	r24, r25
 1a6:	31 f3       	breq	.-52     	; 0x174 <scanKeyboard+0x1a>
 1a8:	e2 cf       	rjmp	.-60     	; 0x16e <scanKeyboard+0x14>

000001aa <determineKey>:
			rowState = PORTB;
		}
		return 0;
	}
	uint8_t determineKey(uint8_t scannedKey, uint8_t possition)
	{
 1aa:	96 2f       	mov	r25, r22
		
		if (scannedKey == 0b01101110)
 1ac:	8e 36       	cpi	r24, 0x6E	; 110
 1ae:	61 f4       	brne	.+24     	; 0x1c8 <determineKey+0x1e>
		{
			//Do something that indicates 1 has been pressed
			lcd_gotoxy(possition,1);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	89 2f       	mov	r24, r25
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 1bc:	8f e2       	ldi	r24, 0x2F	; 47
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	08 95       	ret
		}
		else if (scannedKey == 0b01011110)
 1c8:	8e 35       	cpi	r24, 0x5E	; 94
 1ca:	61 f4       	brne	.+24     	; 0x1e4 <determineKey+0x3a>
		{
			//Do something that indicates 2 has been pressed
			lcd_gotoxy(possition,1);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	89 2f       	mov	r24, r25
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 1d8:	8f e2       	ldi	r24, 0x2F	; 47
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 2;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	08 95       	ret
		}
		else if (scannedKey == 0b00111110)
 1e4:	8e 33       	cpi	r24, 0x3E	; 62
 1e6:	61 f4       	brne	.+24     	; 0x200 <determineKey+0x56>
		{
			//Do something that indicates 3 has been pressed
			lcd_gotoxy(possition,1);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	89 2f       	mov	r24, r25
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 1f4:	8f e2       	ldi	r24, 0x2F	; 47
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 3;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	08 95       	ret
		}
		else if (scannedKey == 0b01101101)
 200:	8d 36       	cpi	r24, 0x6D	; 109
 202:	61 f4       	brne	.+24     	; 0x21c <determineKey+0x72>
		{
			//Do something that indicates 4 has been pressed
			lcd_gotoxy(possition,1);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	89 2f       	mov	r24, r25
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 210:	8f e2       	ldi	r24, 0x2F	; 47
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 4;
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	08 95       	ret
		}
		else if (scannedKey == 0b01011101)
 21c:	8d 35       	cpi	r24, 0x5D	; 93
 21e:	61 f4       	brne	.+24     	; 0x238 <determineKey+0x8e>
		{
			//Do something that indicates 5 has been pressed
			lcd_gotoxy(possition,1);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	89 2f       	mov	r24, r25
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 22c:	8f e2       	ldi	r24, 0x2F	; 47
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 5;
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	08 95       	ret
		}
		else if (scannedKey == 0b00111101)
 238:	8d 33       	cpi	r24, 0x3D	; 61
 23a:	61 f4       	brne	.+24     	; 0x254 <determineKey+0xaa>
		{
			//Do something that indicates 6 has been pressed
			lcd_gotoxy(possition,1);
 23c:	61 e0       	ldi	r22, 0x01	; 1
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	89 2f       	mov	r24, r25
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 248:	8f e2       	ldi	r24, 0x2F	; 47
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 6;
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	08 95       	ret
		}
		else if (scannedKey == 0b01101011)
 254:	8b 36       	cpi	r24, 0x6B	; 107
 256:	61 f4       	brne	.+24     	; 0x270 <determineKey+0xc6>
		{
			//Do something that indicates 7 has been pressed
			lcd_gotoxy(possition,1);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	89 2f       	mov	r24, r25
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 264:	8f e2       	ldi	r24, 0x2F	; 47
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 7;
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	08 95       	ret
		}
		else if (scannedKey == 0b01011011)
 270:	8b 35       	cpi	r24, 0x5B	; 91
 272:	61 f4       	brne	.+24     	; 0x28c <determineKey+0xe2>
		{
			//Do something that indicates 8 has been pressed
			lcd_gotoxy(possition,1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	89 2f       	mov	r24, r25
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 280:	8f e2       	ldi	r24, 0x2F	; 47
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 8;
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	08 95       	ret
		}
		else if (scannedKey == 0b00111011)
 28c:	8b 33       	cpi	r24, 0x3B	; 59
 28e:	61 f4       	brne	.+24     	; 0x2a8 <determineKey+0xfe>
		{
			//Do something that indicates 9 has been pressed
			lcd_gotoxy(possition,1);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	89 2f       	mov	r24, r25
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 29c:	8f e2       	ldi	r24, 0x2F	; 47
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 9;
 2a4:	89 e0       	ldi	r24, 0x09	; 9
 2a6:	08 95       	ret
		}
		else if (scannedKey == 0b01100111)
 2a8:	87 36       	cpi	r24, 0x67	; 103
 2aa:	61 f4       	brne	.+24     	; 0x2c4 <determineKey+0x11a>
		{
			//Do something that indicates * has been pressed
			lcd_gotoxy(possition,1);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	89 2f       	mov	r24, r25
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 2b8:	8f e2       	ldi	r24, 0x2F	; 47
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 10;
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	08 95       	ret
		}
		else if (scannedKey == 0b01010111)
 2c4:	87 35       	cpi	r24, 0x57	; 87
 2c6:	61 f4       	brne	.+24     	; 0x2e0 <determineKey+0x136>
		{
			//Do something that indicates 0 has been pressed
			lcd_gotoxy(possition,1);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	89 2f       	mov	r24, r25
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 2d4:	8f e2       	ldi	r24, 0x2F	; 47
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 11;
 2dc:	8b e0       	ldi	r24, 0x0B	; 11
 2de:	08 95       	ret
		}
		else if (scannedKey == 0b00110111)
 2e0:	87 33       	cpi	r24, 0x37	; 55
 2e2:	61 f4       	brne	.+24     	; 0x2fc <determineKey+0x152>
		{
			//Do something that indicates # has been pressed
			lcd_gotoxy(possition,1);
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	89 2f       	mov	r24, r25
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("*");
 2f0:	8f e2       	ldi	r24, 0x2F	; 47
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
			return 12;
 2f8:	8c e0       	ldi	r24, 0x0C	; 12
 2fa:	08 95       	ret
		}
		else
		{
			// when none of the keys are pressed
			return 15;
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
		}
	}
 2fe:	08 95       	ret

00000300 <ArrayComparison>:
	uint8_t ArrayComparison(uint8_t a[2][4], uint8_t b[])
	{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	dc 01       	movw	r26, r24
 306:	26 2f       	mov	r18, r22
 308:	37 2f       	mov	r19, r23
 30a:	fc 01       	movw	r30, r24
 30c:	34 96       	adiw	r30, 0x04	; 4
 30e:	c6 2f       	mov	r28, r22
 310:	d7 2f       	mov	r29, r23
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
		{
			/* Checks the line if it is matching the
			   entered massive*/
			for(int i = 0; i<4;i++)
			{
				if(a[j][i] == b[i])
 316:	5d 91       	ld	r21, X+
 318:	49 91       	ld	r20, Y+
 31a:	54 13       	cpse	r21, r20
 31c:	05 c0       	rjmp	.+10     	; 0x328 <ArrayComparison+0x28>
				{
					/* if it is matching than returns 
					   1 as true*/
					cor++;
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
					if(cor == 4)
 322:	64 30       	cpi	r22, 0x04	; 4
 324:	71 05       	cpc	r23, r1
 326:	b1 f0       	breq	.+44     	; 0x354 <ArrayComparison+0x54>
		/* Takes matrix lines one by one*/
		for(int j = 0; j < 2;j++)
		{
			/* Checks the line if it is matching the
			   entered massive*/
			for(int i = 0; i<4;i++)
 328:	ae 17       	cp	r26, r30
 32a:	bf 07       	cpc	r27, r31
 32c:	a1 f7       	brne	.-24     	; 0x316 <ArrayComparison+0x16>
 32e:	08 96       	adiw	r24, 0x08	; 8
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
			{
				if(a[j][i] == b[i])
 334:	51 91       	ld	r21, Z+
 336:	d9 01       	movw	r26, r18
 338:	4d 91       	ld	r20, X+
 33a:	9d 01       	movw	r18, r26
 33c:	54 13       	cpse	r21, r20
 33e:	05 c0       	rjmp	.+10     	; 0x34a <ArrayComparison+0x4a>
				{
					/* if it is matching than returns 
					   1 as true*/
					cor++;
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
					if(cor == 4)
 344:	64 30       	cpi	r22, 0x04	; 4
 346:	71 05       	cpc	r23, r1
 348:	39 f0       	breq	.+14     	; 0x358 <ArrayComparison+0x58>
		/* Takes matrix lines one by one*/
		for(int j = 0; j < 2;j++)
		{
			/* Checks the line if it is matching the
			   entered massive*/
			for(int i = 0; i<4;i++)
 34a:	e8 17       	cp	r30, r24
 34c:	f9 07       	cpc	r31, r25
 34e:	91 f7       	brne	.-28     	; 0x334 <ArrayComparison+0x34>
				}
			}
			cor=0;
		}
		// If not matching returns 0 as false
		return 0;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	03 c0       	rjmp	.+6      	; 0x35a <ArrayComparison+0x5a>
				{
					/* if it is matching than returns 
					   1 as true*/
					cor++;
					if(cor == 4)
					return 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	01 c0       	rjmp	.+2      	; 0x35a <ArrayComparison+0x5a>
 358:	81 e0       	ldi	r24, 0x01	; 1
			}
			cor=0;
		}
		// If not matching returns 0 as false
		return 0;
	}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <setup>:
	void setup()
	{
		// LED's
		GPIO_config_output(&DDRD,LED_RED);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	8a e2       	ldi	r24, 0x2A	; 42
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_config_output>
		GPIO_config_output(&DDRD,LED_GREEN);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	8a e2       	ldi	r24, 0x2A	; 42
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_config_output>
		
		// Lock
		GPIO_config_output(&DDRC,Lock);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	87 e2       	ldi	r24, 0x27	; 39
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_config_output>
		// Lock set low
		GPIO_write_low(&PORTC,Lock);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 e5 01 	call	0x3ca	; 0x3ca <GPIO_write_low>
		
		// Buzzer
		GPIO_config_output(&DDRC,Buzzer);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	87 e2       	ldi	r24, 0x27	; 39
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <GPIO_config_output>
		// Buzzer set low
		GPIO_write_low(&PORTC,Buzzer);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	88 e2       	ldi	r24, 0x28	; 40
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 e5 01 	call	0x3ca	; 0x3ca <GPIO_write_low>
		
		// Columns
		DDRC |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 39c:	87 b1       	in	r24, 0x07	; 7
 39e:	80 67       	ori	r24, 0x70	; 112
 3a0:	87 b9       	out	0x07, r24	; 7
	
		// Set all columns to high
		PORTC  |= (1<< COLUMN1) | (1<<COLUMN2) | (1<< COLUMN3);
 3a2:	88 b1       	in	r24, 0x08	; 8
 3a4:	80 67       	ori	r24, 0x70	; 112
 3a6:	88 b9       	out	0x08, r24	; 8
	
		// Rows implicitly defined as inputs
		// Turn on internal pull ups for the rows
		DDRB = 0x00;
 3a8:	14 b8       	out	0x04, r1	; 4
		PORTB |= (1<<ROW1) | (1 << ROW2) | (1 << ROW3) | (1 << ROW4);
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	8f 60       	ori	r24, 0x0F	; 15
 3ae:	85 b9       	out	0x05, r24	; 5
 3b0:	08 95       	ret

000003b2 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 3b2:	fc 01       	movw	r30, r24
 3b4:	40 81       	ld	r20, Z
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_config_output+0xe>
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	6a 95       	dec	r22
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_config_output+0xa>
 3c4:	24 2b       	or	r18, r20
 3c6:	20 83       	st	Z, r18
 3c8:	08 95       	ret

000003ca <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 3ca:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
 3cc:	90 81       	ld	r25, Z
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <GPIO_write_low+0xe>
 3d4:	22 0f       	add	r18, r18
 3d6:	33 1f       	adc	r19, r19
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <GPIO_write_low+0xa>
 3dc:	20 95       	com	r18
 3de:	29 23       	and	r18, r25
 3e0:	20 83       	st	Z, r18
 3e2:	08 95       	ret

000003e4 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
 3e4:	fc 01       	movw	r30, r24
 3e6:	40 81       	ld	r20, Z
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <GPIO_write_high+0xe>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	6a 95       	dec	r22
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <GPIO_write_high+0xa>
 3f6:	24 2b       	or	r18, r20
 3f8:	20 83       	st	Z, r18
 3fa:	08 95       	ret

000003fc <GPIO_toggle>:

/*--------------------------------------------------------------------*/
/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num);
 3fc:	fc 01       	movw	r30, r24
 3fe:	40 81       	ld	r20, Z
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	02 c0       	rjmp	.+4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 406:	22 0f       	add	r18, r18
 408:	33 1f       	adc	r19, r19
 40a:	6a 95       	dec	r22
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	24 27       	eor	r18, r20
 410:	20 83       	st	Z, r18
 412:	08 95       	ret

00000414 <toggle_e>:
 414:	5a 9a       	sbi	0x0b, 2	; 11
 416:	85 e0       	ldi	r24, 0x05	; 5
 418:	8a 95       	dec	r24
 41a:	f1 f7       	brne	.-4      	; 0x418 <toggle_e+0x4>
 41c:	00 00       	nop
 41e:	5a 98       	cbi	0x0b, 2	; 11
 420:	08 95       	ret

00000422 <lcd_write>:
 422:	cf 93       	push	r28
 424:	c8 2f       	mov	r28, r24
 426:	66 23       	and	r22, r22
 428:	11 f0       	breq	.+4      	; 0x42e <lcd_write+0xc>
 42a:	5b 9a       	sbi	0x0b, 3	; 11
 42c:	01 c0       	rjmp	.+2      	; 0x430 <lcd_write+0xe>
 42e:	5b 98       	cbi	0x0b, 3	; 11
 430:	54 9a       	sbi	0x0a, 4	; 10
 432:	55 9a       	sbi	0x0a, 5	; 10
 434:	56 9a       	sbi	0x0a, 6	; 10
 436:	57 9a       	sbi	0x0a, 7	; 10
 438:	5f 98       	cbi	0x0b, 7	; 11
 43a:	5e 98       	cbi	0x0b, 6	; 11
 43c:	5d 98       	cbi	0x0b, 5	; 11
 43e:	5c 98       	cbi	0x0b, 4	; 11
 440:	cc 23       	and	r28, r28
 442:	0c f4       	brge	.+2      	; 0x446 <lcd_write+0x24>
 444:	5f 9a       	sbi	0x0b, 7	; 11
 446:	c6 fd       	sbrc	r28, 6
 448:	5e 9a       	sbi	0x0b, 6	; 11
 44a:	c5 fd       	sbrc	r28, 5
 44c:	5d 9a       	sbi	0x0b, 5	; 11
 44e:	c4 fd       	sbrc	r28, 4
 450:	5c 9a       	sbi	0x0b, 4	; 11
 452:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 456:	5f 98       	cbi	0x0b, 7	; 11
 458:	5e 98       	cbi	0x0b, 6	; 11
 45a:	5d 98       	cbi	0x0b, 5	; 11
 45c:	5c 98       	cbi	0x0b, 4	; 11
 45e:	c3 fd       	sbrc	r28, 3
 460:	5f 9a       	sbi	0x0b, 7	; 11
 462:	c2 fd       	sbrc	r28, 2
 464:	5e 9a       	sbi	0x0b, 6	; 11
 466:	c1 fd       	sbrc	r28, 1
 468:	5d 9a       	sbi	0x0b, 5	; 11
 46a:	c0 fd       	sbrc	r28, 0
 46c:	5c 9a       	sbi	0x0b, 4	; 11
 46e:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 472:	5c 9a       	sbi	0x0b, 4	; 11
 474:	5d 9a       	sbi	0x0b, 5	; 11
 476:	5e 9a       	sbi	0x0b, 6	; 11
 478:	5f 9a       	sbi	0x0b, 7	; 11
 47a:	87 eb       	ldi	r24, 0xB7	; 183
 47c:	9b e0       	ldi	r25, 0x0B	; 11
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <lcd_write+0x5c>
 482:	00 c0       	rjmp	.+0      	; 0x484 <lcd_write+0x62>
 484:	00 00       	nop
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <lcd_command>:
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	0e 94 11 02 	call	0x422	; 0x422 <lcd_write>
 490:	08 95       	ret

00000492 <lcd_gotoxy>:
 492:	61 11       	cpse	r22, r1
 494:	04 c0       	rjmp	.+8      	; 0x49e <lcd_gotoxy+0xc>
 496:	80 58       	subi	r24, 0x80	; 128
 498:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 49c:	08 95       	ret
 49e:	80 54       	subi	r24, 0x40	; 64
 4a0:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 4a4:	08 95       	ret

000004a6 <lcd_clrscr>:
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 4ac:	08 95       	ret

000004ae <lcd_putc>:
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	0e 94 11 02 	call	0x422	; 0x422 <lcd_write>
 4b4:	08 95       	ret

000004b6 <lcd_puts>:
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ec 01       	movw	r28, r24
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	fc 01       	movw	r30, r24
 4c0:	80 81       	ld	r24, Z
 4c2:	88 23       	and	r24, r24
 4c4:	29 f0       	breq	.+10     	; 0x4d0 <lcd_puts+0x1a>
 4c6:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_putc>
 4ca:	89 91       	ld	r24, Y+
 4cc:	81 11       	cpse	r24, r1
 4ce:	fb cf       	rjmp	.-10     	; 0x4c6 <lcd_puts+0x10>
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <lcd_init>:
 4d6:	cf 93       	push	r28
 4d8:	c8 2f       	mov	r28, r24
 4da:	53 9a       	sbi	0x0a, 3	; 10
 4dc:	55 9a       	sbi	0x0a, 5	; 10
 4de:	52 9a       	sbi	0x0a, 2	; 10
 4e0:	54 9a       	sbi	0x0a, 4	; 10
 4e2:	55 9a       	sbi	0x0a, 5	; 10
 4e4:	56 9a       	sbi	0x0a, 6	; 10
 4e6:	57 9a       	sbi	0x0a, 7	; 10
 4e8:	8f ef       	ldi	r24, 0xFF	; 255
 4ea:	99 ef       	ldi	r25, 0xF9	; 249
 4ec:	01 97       	sbiw	r24, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <lcd_init+0x16>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <lcd_init+0x1c>
 4f2:	00 00       	nop
 4f4:	5d 9a       	sbi	0x0b, 5	; 11
 4f6:	5c 9a       	sbi	0x0b, 4	; 11
 4f8:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 4fc:	8f e1       	ldi	r24, 0x1F	; 31
 4fe:	9e e4       	ldi	r25, 0x4E	; 78
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <lcd_init+0x2a>
 504:	00 c0       	rjmp	.+0      	; 0x506 <lcd_init+0x30>
 506:	00 00       	nop
 508:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <lcd_init+0x3a>
 514:	00 c0       	rjmp	.+0      	; 0x516 <lcd_init+0x40>
 516:	00 00       	nop
 518:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	01 97       	sbiw	r24, 0x01	; 1
 522:	f1 f7       	brne	.-4      	; 0x520 <lcd_init+0x4a>
 524:	00 c0       	rjmp	.+0      	; 0x526 <lcd_init+0x50>
 526:	00 00       	nop
 528:	5c 98       	cbi	0x0b, 4	; 11
 52a:	0e 94 0a 02 	call	0x414	; 0x414 <toggle_e>
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <lcd_init+0x5c>
 536:	00 c0       	rjmp	.+0      	; 0x538 <lcd_init+0x62>
 538:	00 00       	nop
 53a:	88 e2       	ldi	r24, 0x28	; 40
 53c:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 546:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_clrscr>
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 550:	8c 2f       	mov	r24, r28
 552:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <main>:

int main(void)
{
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	ADMUX |= (1 << REFS0);
 55a:	ec e7       	ldi	r30, 0x7C	; 124
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	80 64       	ori	r24, 0x40	; 64
 562:	80 83       	st	Z, r24
	// Set input channet to ADC0
	ADMUX &= ~((1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0));
 564:	80 81       	ld	r24, Z
 566:	80 7f       	andi	r24, 0xF0	; 240
 568:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |=  (1 << ADEN);
 56a:	ea e7       	ldi	r30, 0x7A	; 122
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	80 68       	ori	r24, 0x80	; 128
 572:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1 << ADIE);
 574:	80 81       	ld	r24, Z
 576:	88 60       	ori	r24, 0x08	; 8
 578:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2));
 57a:	80 81       	ld	r24, Z
 57c:	87 60       	ori	r24, 0x07	; 7
 57e:	80 83       	st	Z, r24

	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 580:	8c e0       	ldi	r24, 0x0C	; 12
 582:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_init>

	// Set pointer to beginning of CGRAM memory
	lcd_command(1 << LCD_CGRAM);
 586:	80 e4       	ldi	r24, 0x40	; 64
 588:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
	
	// Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 58c:	80 e8       	ldi	r24, 0x80	; 128
 58e:	0e 94 45 02 	call	0x48a	; 0x48a <lcd_command>
	
	// Display first custom character
	lcd_gotoxy(0,0);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
	lcd_puts("Enter password:");
 59a:	81 e3       	ldi	r24, 0x31	; 49
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
	setup();		// Setting up all the I/O ports
 5a2:	0e 94 b0 01 	call	0x360	; 0x360 <setup>
	
	
	// 
	TIM0_overflow_interrupt_enable();
 5a6:	ee e6       	ldi	r30, 0x6E	; 110
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	81 60       	ori	r24, 0x01	; 1
 5ae:	80 83       	st	Z, r24
	TIM0_overflow_16ms();
 5b0:	85 b5       	in	r24, 0x25	; 37
 5b2:	8d 7f       	andi	r24, 0xFD	; 253
 5b4:	85 bd       	out	0x25, r24	; 37
 5b6:	85 b5       	in	r24, 0x25	; 37
 5b8:	85 60       	ori	r24, 0x05	; 5
 5ba:	85 bd       	out	0x25, r24	; 37
	 
	// Initiate uart
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 5bc:	87 e6       	ldi	r24, 0x67	; 103
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 4d 04 	call	0x89a	; 0x89a <uart_init>
    
	// Enable interrupts
	sei();
 5c4:	78 94       	sei
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <main+0x6c>

000005c8 <__vector_16>:
    while(1)
    {
	}
}
ISR(TIMER0_OVF_vect)
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	8f 93       	push	r24
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 5d8:	ea e7       	ldi	r30, 0x7A	; 122
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	80 64       	ori	r24, 0x40	; 64
 5e0:	80 83       	st	Z, r24
}
 5e2:	ff 91       	pop	r31
 5e4:	ef 91       	pop	r30
 5e6:	8f 91       	pop	r24
 5e8:	0f 90       	pop	r0
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	0f 90       	pop	r0
 5ee:	1f 90       	pop	r1
 5f0:	18 95       	reti

000005f2 <__vector_21>:
ISR(ADC_vect)
{	
 5f2:	1f 92       	push	r1
 5f4:	0f 92       	push	r0
 5f6:	0f b6       	in	r0, 0x3f	; 63
 5f8:	0f 92       	push	r0
 5fa:	11 24       	eor	r1, r1
 5fc:	2f 93       	push	r18
 5fe:	3f 93       	push	r19
 600:	4f 93       	push	r20
 602:	5f 93       	push	r21
 604:	6f 93       	push	r22
 606:	7f 93       	push	r23
 608:	8f 93       	push	r24
 60a:	9f 93       	push	r25
 60c:	af 93       	push	r26
 60e:	bf 93       	push	r27
 610:	cf 93       	push	r28
 612:	ef 93       	push	r30
 614:	ff 93       	push	r31
	// Time dedicated to insert a password
	static uint8_t time = 0; 
	// Time is always amplified by 1
	time++;					
 616:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <time.2110>
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	98 0f       	add	r25, r24
 61e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <time.2110>
	   did to write the password */
	static uint8_t tries = 0;
	/* If the number of tries are not exceeding 4
	   and the time is not more than 5 seconds 
	   the code for entering password is executed */
	if(tries < 4 && time < 48)
 622:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <tries.2115>
 626:	24 30       	cpi	r18, 0x04	; 4
 628:	08 f0       	brcs	.+2      	; 0x62c <__vector_21+0x3a>
 62a:	6c c0       	rjmp	.+216    	; 0x704 <__vector_21+0x112>
 62c:	90 33       	cpi	r25, 0x30	; 48
 62e:	08 f0       	brcs	.+2      	; 0x632 <__vector_21+0x40>
 630:	95 c0       	rjmp	.+298    	; 0x75c <__vector_21+0x16a>
	{
		/* Finding the pressed key and
		   saving in key variable */
		key = determineKey(scanKeyboard(),quantity);
 632:	c0 91 0b 02 	lds	r28, 0x020B	; 0x80020b <quantity.2112>
 636:	0e 94 ad 00 	call	0x15a	; 0x15a <scanKeyboard>
 63a:	6c 2f       	mov	r22, r28
 63c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <determineKey>
 640:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <key.2111>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 644:	2f ef       	ldi	r18, 0xFF	; 255
 646:	81 ee       	ldi	r24, 0xE1	; 225
 648:	94 e0       	ldi	r25, 0x04	; 4
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <__vector_21+0x58>
 652:	00 c0       	rjmp	.+0      	; 0x654 <__vector_21+0x62>
 654:	00 00       	nop
		 wouldn't be scanned multiple times
		*/
		_delay_ms(100);
		/* Pressed key is added to the required 
		   place in the massive */
		entered_num[quantity]=key;
 656:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <quantity.2112>
 65a:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <key.2111>
 65e:	e8 2f       	mov	r30, r24
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	ea 5f       	subi	r30, 0xFA	; 250
 664:	fd 4f       	sbci	r31, 0xFD	; 253
 666:	90 83       	st	Z, r25
		/* If the key is not pressed this step 
		   is gonna be skipped*/
		if(key != 15) 
 668:	9f 30       	cpi	r25, 0x0F	; 15
 66a:	09 f4       	brne	.+2      	; 0x66e <__vector_21+0x7c>
 66c:	ac c0       	rjmp	.+344    	; 0x7c6 <__vector_21+0x1d4>
		{
			/* Quantity of keystrokes are amplified 
		       after every keystroke */
			quantity++; 
 66e:	8f 5f       	subi	r24, 0xFF	; 255
			/* If quantity reaches 4 = the maximum
			   number of password code this part of 
			   the code is executed */
			if(quantity==4 ) 
 670:	84 30       	cpi	r24, 0x04	; 4
 672:	19 f0       	breq	.+6      	; 0x67a <__vector_21+0x88>
		   is gonna be skipped*/
		if(key != 15) 
		{
			/* Quantity of keystrokes are amplified 
		       after every keystroke */
			quantity++; 
 674:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <quantity.2112>
 678:	a6 c0       	rjmp	.+332    	; 0x7c6 <__vector_21+0x1d4>
			   the code is executed */
			if(quantity==4 ) 
			{
				/* since the quantity is already
				   at the max */
				quantity = 0;
 67a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <quantity.2112>
				// Go to LCD second line
				lcd_gotoxy(0,1);
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
				/* If the entered number is in the 
				   correct number matrix than this 
				   part of the code is executed 
				   and the doors unlock */
				if(ArrayComparison(correct_num,entered_num))
 686:	66 e0       	ldi	r22, 0x06	; 6
 688:	72 e0       	ldi	r23, 0x02	; 2
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 80 01 	call	0x300	; 0x300 <ArrayComparison>
 692:	88 23       	and	r24, r24
 694:	d1 f0       	breq	.+52     	; 0x6ca <__vector_21+0xd8>
				{
					// text is written in uart 
					uart_puts("Correct password\n\r");
 696:	81 e4       	ldi	r24, 0x41	; 65
 698:	91 e0       	ldi	r25, 0x01	; 1
 69a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <uart_puts>
					// text is written in LCD
					lcd_puts("Correct password");
 69e:	84 e5       	ldi	r24, 0x54	; 84
 6a0:	91 e0       	ldi	r25, 0x01	; 1
 6a2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
 6a6:	2f ef       	ldi	r18, 0xFF	; 255
 6a8:	83 ec       	ldi	r24, 0xC3	; 195
 6aa:	99 e0       	ldi	r25, 0x09	; 9
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	80 40       	sbci	r24, 0x00	; 0
 6b0:	90 40       	sbci	r25, 0x00	; 0
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <__vector_21+0xba>
 6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <__vector_21+0xc4>
 6b6:	00 00       	nop
					/* Delay so that the written 
					   text would be seen */
					_delay_ms(200);
					// Green LED blinks 
					GreenBlink();
 6b8:	0e 94 94 00 	call	0x128	; 0x128 <GreenBlink>
					// Doors are unlocked 
					Unlock();
 6bc:	0e 94 53 00 	call	0xa6	; 0xa6 <Unlock>
					// Time is returned to 0 
					time = 0;
 6c0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <time.2110>
					/* The correct password was 
					   inserted so number of 
					   tried attempts to write the
					   password are reduced to 0 */
					tries = 0;
 6c4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <tries.2115>
 6c8:	7e c0       	rjmp	.+252    	; 0x7c6 <__vector_21+0x1d4>
				/* If the wrong password is inserted
				   than this part of code is executed */
				else
				{
					// In uart this text is written
					uart_puts("Incorrect password\n\r");
 6ca:	85 e6       	ldi	r24, 0x65	; 101
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <uart_puts>
					/* LCD show that the password was 
					incorrect */
					lcd_puts("Incorrect");
 6d2:	8a e7       	ldi	r24, 0x7A	; 122
 6d4:	91 e0       	ldi	r25, 0x01	; 1
 6d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
 6da:	2f ef       	ldi	r18, 0xFF	; 255
 6dc:	83 ec       	ldi	r24, 0xC3	; 195
 6de:	99 e0       	ldi	r25, 0x09	; 9
 6e0:	21 50       	subi	r18, 0x01	; 1
 6e2:	80 40       	sbci	r24, 0x00	; 0
 6e4:	90 40       	sbci	r25, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <__vector_21+0xee>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <__vector_21+0xf8>
 6ea:	00 00       	nop
					// Delay to show text
					_delay_ms(200);
					RedBlink(); // Red LED blinks
 6ec:	0e 94 7b 00 	call	0xf6	; 0xf6 <RedBlink>
					/* Buzzer sound to show that the
					   inserted code was wrong */ 
					Buzzer_sound();
 6f0:	0e 94 67 00 	call	0xce	; 0xce <Buzzer_sound>
					// Times reduced to 0
					time = 0;
 6f4:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <time.2110>
					// Attempt number is increased by 1
					tries++;
 6f8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tries.2115>
 6fc:	8f 5f       	subi	r24, 0xFF	; 255
 6fe:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <tries.2115>
 702:	61 c0       	rjmp	.+194    	; 0x7c6 <__vector_21+0x1d4>
	   4 times than this part of the code is 
	   executed */
	else if(tries >3)
	{
		// tries are used as a time variable
		tries++;
 704:	2f 5f       	subi	r18, 0xFF	; 255
 706:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <tries.2115>
		/* time reduced to 0 so that the code
		   would not jump between code */
		time = 0;
 70a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <time.2110>
		lcd_gotoxy(0,1);
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("Too much attempts");
 716:	84 e8       	ldi	r24, 0x84	; 132
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		/* When the LCD is read then the 
		   words change*/
		if(tries == 192)
 71e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tries.2115>
 722:	80 3c       	cpi	r24, 0xC0	; 192
 724:	49 f4       	brne	.+18     	; 0x738 <__vector_21+0x146>
		{
			lcd_gotoxy(0,1);
 726:	61 e0       	ldi	r22, 0x01	; 1
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("You may enter the code");
 72e:	86 e9       	ldi	r24, 0x96	; 150
 730:	91 e0       	ldi	r25, 0x01	; 1
 732:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
 736:	47 c0       	rjmp	.+142    	; 0x7c6 <__vector_21+0x1d4>
		}
		/* Again do the same as before*/
		else if(tries == 232)
 738:	88 3e       	cpi	r24, 0xE8	; 232
 73a:	09 f0       	breq	.+2      	; 0x73e <__vector_21+0x14c>
 73c:	44 c0       	rjmp	.+136    	; 0x7c6 <__vector_21+0x1d4>
		{
			uart_puts("Exceeded 4 times limit\n\r");
 73e:	8d ea       	ldi	r24, 0xAD	; 173
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <uart_puts>
			   to 0 and becomes the number of 
			   attempts again, because it is the 
			   last code part of waiting after 
			   4 wrong attempts and it clears the 
			   LCD second line*/
			tries = 0;
 746:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <tries.2115>
			lcd_gotoxy(0,1);
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
			lcd_puts("                       ");
 752:	87 e1       	ldi	r24, 0x17	; 23
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
 75a:	35 c0       	rjmp	.+106    	; 0x7c6 <__vector_21+0x1d4>
	/* when attempt time reaches 5 seconds
	   the LCD shows that the attempt time
	   has ended and shows the text written 
	   below, time is used for the delay,
	   so that the user could see the code*/
	else if(time > 47 && time < 101)
 75c:	21 ed       	ldi	r18, 0xD1	; 209
 75e:	28 0f       	add	r18, r24
 760:	25 33       	cpi	r18, 0x35	; 53
 762:	70 f4       	brcc	.+28     	; 0x780 <__vector_21+0x18e>
	{
		lcd_gotoxy(0,1);
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("Took to much time");
 76c:	86 ec       	ldi	r24, 0xC6	; 198
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		time++;
 774:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <time.2110>
 778:	8f 5f       	subi	r24, 0xFF	; 255
 77a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <time.2110>
 77e:	23 c0       	rjmp	.+70     	; 0x7c6 <__vector_21+0x1d4>
	}
	else if(time > 100 && time < 170)
 780:	84 56       	subi	r24, 0x64	; 100
 782:	85 34       	cpi	r24, 0x45	; 69
 784:	70 f4       	brcc	.+28     	; 0x7a2 <__vector_21+0x1b0>
	{
		lcd_gotoxy(0,1);
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("Try again              ");
 78e:	88 ed       	ldi	r24, 0xD8	; 216
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		time++;
 796:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <time.2110>
 79a:	8f 5f       	subi	r24, 0xFF	; 255
 79c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <time.2110>
 7a0:	12 c0       	rjmp	.+36     	; 0x7c6 <__vector_21+0x1d4>
	}
	else if(time > 169)
 7a2:	9a 3a       	cpi	r25, 0xAA	; 170
 7a4:	80 f0       	brcs	.+32     	; 0x7c6 <__vector_21+0x1d4>
	{
		uart_puts("Time limit is over\n\r");
 7a6:	80 ef       	ldi	r24, 0xF0	; 240
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <uart_puts>
		lcd_gotoxy(0,1);
 7ae:	61 e0       	ldi	r22, 0x01	; 1
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	0e 94 49 02 	call	0x492	; 0x492 <lcd_gotoxy>
		lcd_puts("                       ");
 7b6:	87 e1       	ldi	r24, 0x17	; 23
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_puts>
		time =0;
 7be:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <time.2110>
		quantity=0;
 7c2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <quantity.2112>
	}
 7c6:	ff 91       	pop	r31
 7c8:	ef 91       	pop	r30
 7ca:	cf 91       	pop	r28
 7cc:	bf 91       	pop	r27
 7ce:	af 91       	pop	r26
 7d0:	9f 91       	pop	r25
 7d2:	8f 91       	pop	r24
 7d4:	7f 91       	pop	r23
 7d6:	6f 91       	pop	r22
 7d8:	5f 91       	pop	r21
 7da:	4f 91       	pop	r20
 7dc:	3f 91       	pop	r19
 7de:	2f 91       	pop	r18
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_18>:
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	2f 93       	push	r18
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	ef 93       	push	r30
 7fc:	ff 93       	push	r31
 7fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 802:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 806:	8c 71       	andi	r24, 0x1C	; 28
 808:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <UART_RxHead>
 80c:	ef 5f       	subi	r30, 0xFF	; 255
 80e:	ef 73       	andi	r30, 0x3F	; 63
 810:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <UART_RxTail>
 814:	e9 17       	cp	r30, r25
 816:	39 f0       	breq	.+14     	; 0x826 <__vector_18+0x3c>
 818:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <UART_RxHead>
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	ed 5e       	subi	r30, 0xED	; 237
 820:	fd 4f       	sbci	r31, 0xFD	; 253
 822:	20 83       	st	Z, r18
 824:	01 c0       	rjmp	.+2      	; 0x828 <__vector_18+0x3e>
 826:	82 e0       	ldi	r24, 0x02	; 2
 828:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <UART_LastRxError>
 82c:	89 2b       	or	r24, r25
 82e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <UART_LastRxError>
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	9f 91       	pop	r25
 838:	8f 91       	pop	r24
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti

00000846 <__vector_19>:
 846:	1f 92       	push	r1
 848:	0f 92       	push	r0
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	0f 92       	push	r0
 84e:	11 24       	eor	r1, r1
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	ef 93       	push	r30
 856:	ff 93       	push	r31
 858:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <UART_TxHead>
 85c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <UART_TxTail>
 860:	98 17       	cp	r25, r24
 862:	69 f0       	breq	.+26     	; 0x87e <__vector_19+0x38>
 864:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <UART_TxTail>
 868:	ef 5f       	subi	r30, 0xFF	; 255
 86a:	ef 73       	andi	r30, 0x3F	; 63
 86c:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <UART_TxTail>
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	ed 5a       	subi	r30, 0xAD	; 173
 874:	fd 4f       	sbci	r31, 0xFD	; 253
 876:	80 81       	ld	r24, Z
 878:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 87c:	05 c0       	rjmp	.+10     	; 0x888 <__vector_19+0x42>
 87e:	e1 ec       	ldi	r30, 0xC1	; 193
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	80 81       	ld	r24, Z
 884:	8f 7d       	andi	r24, 0xDF	; 223
 886:	80 83       	st	Z, r24
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <uart_init>:
 89a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <UART_TxHead>
 89e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <UART_TxTail>
 8a2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <UART_RxHead>
 8a6:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <UART_RxTail>
 8aa:	99 23       	and	r25, r25
 8ac:	1c f4       	brge	.+6      	; 0x8b4 <uart_init+0x1a>
 8ae:	22 e0       	ldi	r18, 0x02	; 2
 8b0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 8b4:	90 78       	andi	r25, 0x80	; 128
 8b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 8ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 8be:	88 e9       	ldi	r24, 0x98	; 152
 8c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 8c4:	86 e0       	ldi	r24, 0x06	; 6
 8c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 8ca:	08 95       	ret

000008cc <uart_putc>:
 8cc:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <UART_TxHead>
 8d0:	2f 5f       	subi	r18, 0xFF	; 255
 8d2:	2f 73       	andi	r18, 0x3F	; 63
 8d4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <UART_TxTail>
 8d8:	29 17       	cp	r18, r25
 8da:	e1 f3       	breq	.-8      	; 0x8d4 <uart_putc+0x8>
 8dc:	e2 2f       	mov	r30, r18
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	ed 5a       	subi	r30, 0xAD	; 173
 8e2:	fd 4f       	sbci	r31, 0xFD	; 253
 8e4:	80 83       	st	Z, r24
 8e6:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <UART_TxHead>
 8ea:	e1 ec       	ldi	r30, 0xC1	; 193
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	80 62       	ori	r24, 0x20	; 32
 8f2:	80 83       	st	Z, r24
 8f4:	08 95       	ret

000008f6 <uart_puts>:
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	ec 01       	movw	r28, r24
 8fc:	88 81       	ld	r24, Y
 8fe:	88 23       	and	r24, r24
 900:	31 f0       	breq	.+12     	; 0x90e <__stack+0xf>
 902:	21 96       	adiw	r28, 0x01	; 1
 904:	0e 94 66 04 	call	0x8cc	; 0x8cc <uart_putc>
 908:	89 91       	ld	r24, Y+
 90a:	81 11       	cpse	r24, r1
 90c:	fb cf       	rjmp	.-10     	; 0x904 <__stack+0x5>
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
